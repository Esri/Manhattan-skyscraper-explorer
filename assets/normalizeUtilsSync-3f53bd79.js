import{cE as k,cL as A,cM as N,cN as V,cO as E,cP as J,bE as R,cQ as M,cR as X,cS as Q}from"./index-2d893400.js";import{r as S,s as j,i as p}from"./normalizeUtilsCommon-9f860a47.js";function H(e){return $(e,!0)}function K(e){return $(e,!1)}function $(e,i){if(e==null)return null;const n=e.spatialReference,s=A(n),t="toJSON"in e?e.toJSON():e;if(!s)return t;const h=N(n)?102100:4326,u=S[h].maxX,_=S[h].minX;if(V(t))return T(t,u,_);if(E(t))return t.points=t.points.map(o=>T(o,u,_)),t;if(J(t))return q(t,s);if(R(t)||M(t)){const o=X(B,t),r={xmin:o[0],ymin:o[1],xmax:o[2],ymax:o[3]},x=p(r.xmin,_)*(2*u),m=x===0?t:j(t,x);return r.xmin+=x,r.xmax+=x,r.xmax>u?w(m,u,i):r.xmin<_?w(m,_,i):m}return t}function q(e,i){if(!i)return e;const n=z(e,i).map(s=>s.extent);return n.length<2?n[0]||e:n.length>2?(e.xmin=i.valid[0],e.xmax=i.valid[1],e):{rings:n.map(s=>[[s.xmin,s.ymin],[s.xmin,s.ymax],[s.xmax,s.ymax],[s.xmax,s.ymin],[s.xmin,s.ymin]])}}function T(e,i,n){if(Array.isArray(e)){const s=e[0];if(s>i){const t=p(s,i);e[0]=s+t*(-2*i)}else if(s<n){const t=p(s,n);e[0]=s+t*(-2*n)}}else{const s=e.x;if(s>i){const t=p(s,i);e.x+=t*(-2*i)}else if(s<n){const t=p(s,n);e.x+=t*(-2*n)}}return e}function z(e,i){const n=[],{ymin:s,ymax:t,xmin:h,xmax:u}=e,_=e.xmax-e.xmin,[o,r]=i.valid,{x,frameId:m}=L(e.xmin,i),{x:c,frameId:a}=L(e.xmax,i),b=x===c&&_>0;if(_>2*r){const v={xmin:h<u?x:c,ymin:s,xmax:r,ymax:t},O={xmin:o,ymin:s,xmax:h<u?c:x,ymax:t},P={xmin:0,ymin:s,xmax:r,ymax:t},C={xmin:o,ymin:s,xmax:0,ymax:t},f=[],y=[];I(v,P)&&f.push(m),I(v,C)&&y.push(m),I(O,P)&&f.push(a),I(O,C)&&y.push(a);for(let d=m+1;d<a;d++)f.push(d),y.push(d);n.push(new l(v,[m]),new l(O,[a]),new l(P,f),new l(C,y))}else x>c||b?n.push(new l({xmin:x,ymin:s,xmax:r,ymax:t},[m]),new l({xmin:o,ymin:s,xmax:c,ymax:t},[a])):n.push(new l({xmin:x,ymin:s,xmax:c,ymax:t},[m]));return n}function L(e,i){const[n,s]=i.valid,t=2*s;let h,u=0;return e>s?(h=Math.ceil(Math.abs(e-s)/t),e-=h*t,u=h):e<n&&(h=Math.ceil(Math.abs(e-n)/t),e+=h*t,u=-h),{x:e,frameId:u}}function I(e,i){const{xmin:n,ymin:s,xmax:t,ymax:h}=i;return g(e,n,s)&&g(e,n,h)&&g(e,t,h)&&g(e,t,s)}function g(e,i,n){return i>=e.xmin&&i<=e.xmax&&n>=e.ymin&&n<=e.ymax}function w(e,i,n=!0){const s=!M(e);if(s&&Q(e),n)return new D().cut(e,i);const t=s?e.rings:e.paths,h=s?4:2,u=t.length,_=-2*i;for(let o=0;o<u;o++){const r=t[o];if(r&&r.length>=h){const x=[];for(const m of r)x.push([m[0]+_,m[1]]);t.push(x)}}return s?e.rings=t:e.paths=t,e}class l{constructor(i,n){this.extent=i,this.frameIds=n}}const B=k();class D{constructor(){this._linesIn=[],this._linesOut=[]}cut(i,n){let s;if(this._xCut=n,i.rings)this._closed=!0,s=i.rings,this._minPts=4;else{if(!i.paths)return null;this._closed=!1,s=i.paths,this._minPts=2}for(const h of s){if(!h||h.length<this._minPts)continue;let u=!0;for(const _ of h)u?(this.moveTo(_),u=!1):this.lineTo(_);this._closed&&this.close()}this._pushLineIn(),this._pushLineOut(),s=[];for(const h of this._linesIn)h&&h.length>=this._minPts&&s.push(h);const t=-2*this._xCut;for(const h of this._linesOut)if(h&&h.length>=this._minPts){for(const u of h)u[0]+=t;s.push(h)}return this._closed?i.rings=s:i.paths=s,i}moveTo(i){this._pushLineIn(),this._pushLineOut(),this._prevSide=this._side(i[0]),this._moveTo(i[0],i[1],this._prevSide),this._prevPt=i,this._firstPt=i}lineTo(i){const n=this._side(i[0]);if(n*this._prevSide==-1){const s=this._intersect(this._prevPt,i);this._lineTo(this._xCut,s,0),this._prevSide=0,this._lineTo(i[0],i[1],n)}else this._lineTo(i[0],i[1],n);this._prevSide=n,this._prevPt=i}close(){const i=this._firstPt,n=this._prevPt;i[0]===n[0]&&i[1]===n[1]||this.lineTo(i),this._checkClosingPt(this._lineIn),this._checkClosingPt(this._lineOut)}_moveTo(i,n,s){this._closed?(this._lineIn.push([s<=0?i:this._xCut,n]),this._lineOut.push([s>=0?i:this._xCut,n])):(s<=0&&this._lineIn.push([i,n]),s>=0&&this._lineOut.push([i,n]))}_lineTo(i,n,s){this._closed?(this._addPolyVertex(this._lineIn,s<=0?i:this._xCut,n),this._addPolyVertex(this._lineOut,s>=0?i:this._xCut,n)):s<0?(this._prevSide===0&&this._pushLineOut(),this._lineIn.push([i,n])):s>0?(this._prevSide===0&&this._pushLineIn(),this._lineOut.push([i,n])):this._prevSide<0?(this._lineIn.push([i,n]),this._lineOut.push([i,n])):this._prevSide>0&&(this._lineOut.push([i,n]),this._lineIn.push([i,n]))}_addPolyVertex(i,n,s){const t=i.length;t>1&&i[t-1][0]===n&&i[t-2][0]===n?i[t-1][1]=s:i.push([n,s])}_checkClosingPt(i){const n=i.length;n>3&&i[0][0]===this._xCut&&i[n-2][0]===this._xCut&&i[1][0]===this._xCut&&(i[0][1]=i[n-2][1],i.pop())}_side(i){return i<this._xCut?-1:i>this._xCut?1:0}_intersect(i,n){const s=(this._xCut-i[0])/(n[0]-i[0]);return i[1]+s*(n[1]-i[1])}_pushLineIn(){this._lineIn&&this._lineIn.length>=this._minPts&&this._linesIn.push(this._lineIn),this._lineIn=[]}_pushLineOut(){this._lineOut&&this._lineOut.length>=this._minPts&&this._linesOut.push(this._lineOut),this._lineOut=[]}}export{K as a,H as c};
