import{ck as _,aP as v,aH as h,aZ as S,b8 as w,f6 as b,bn as d,b3 as k,f7 as E,aL as C,f8 as u,aV as F,df as A,dV as P,bW as R,f9 as G,aJ as a,aK as l,aM as I,f5 as O,fa as x}from"./index-0199b717.js";import{a as Z}from"./normalizeUtilsSync-2da08523.js";import{m as $}from"./FeatureStore-03e4c7a5.js";import{e as H}from"./QueryEngine-25cd666d.js";import{m as z}from"./elevationInfoUtils-5cd9d27e.js";import{u as L,b as M}from"./DimensionAnalysisView3D-0343a33f.js";import{i as W,o as j}from"./queryEngineUtils-45435fc6.js";import{i as y,r as q,n as m}from"./symbologySnappingCandidates-ab858d8a.js";import"./normalizeUtilsCommon-d91de345.js";import"./BoundsStore-5abd2f82.js";import"./PooledRBush-46c91161.js";import"./quickselect-08f30851.js";import"./optimizedFeatureQueryEngineAdapter-fb0f5985.js";import"./centroid-3dcadaf5.js";import"./normalizeUtils-30f603dc.js";import"./WhereClause-e2c9f470.js";import"./executionError-e8d36121.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-d7352455.js";import"./generateRendererUtils-9a953fca.js";import"./LineVisualElement-94455a83.js";import"./LengthDimension-c402a7cc.js";import"./Segment-c54f3ffd.js";import"./unitFormatUtils-092d1121.js";import"./analysisViewUtils-3cff21a1.js";import"./ImageMaterial-6510b823.js";import"./Factory-226bb5ef.js";import"./RightAngleQuadVisualElement-9d15901a.js";import"./VisualElementResources-1492c044.js";import"./PointVisualElement-92e959a5.js";import"./EditGeometryOperations-767061eb.js";import"./dehydratedFeatureComparison-99482a2b.js";import"./VertexSnappingCandidate-d14f4577.js";const g="graphics-collections";let r=class extends _(v){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d";if(!i||t.type==="map-notes")return y();const s=async(n,o)=>(await O(e.whenLayerView(t),o)).elevationAlignPointsInFeatures(n,o);return y(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:s,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return q(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d",s=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&s?m(s,async(n,o)=>{const p=await e.whenLayerView(t);return d(o),p.queryForSymbologySnapping({candidates:n,spatialReference:e.spatialReference},o)}):m()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this.updatingHandles.removeHandles(g);for(const s of i)this._addMany(s.graphics.toArray()),this.handles.add([s.on("graphic-update",n=>this._onGraphicUpdate(n)),this.updatingHandles.addOnCollectionChange(()=>s.graphics,n=>this._onGraphicsChanged(n))],g)},h);const{view:e}=this,{layer:t}=this.layerSource;e!=null&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{z(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),S(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),h),w(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i}=e,s=await b(this._mapSources(p=>this._fetchCandidatesForSource(p,e,t)));d(t);const n=this._getGroundElevation,o=s.flat().map(p=>W(p,n));return L(i,o),o}get _getGroundElevation(){return j(this.view)}async _fetchCandidatesForSource(e,t,i){const s=M(t,this.view?.type??"2d"),n=await e.queryEngine.executeQueryForSnapping(s,i);d(i);const o=await this._snappingElevationAligner.alignCandidates(n.candidates,i);d(i);const p=await this._symbologySnappingFetcher.fetch(o,i);d(i);const f=p.length===0?o:[...o,...p];return this._snappingElevationFilter.filter(s,f)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)s.geometry!=null&&(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=k(async o=>{await E(e.map(p=>({source:p,dest:this.spatialReference})),{signal:o}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this.updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},n=()=>x(this._pendingAdds,s);i.promise.then(n,n),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(e.geometry==null||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=C.fromExtent(t));const i=this._ensureSource(t.type);if(i==null)return;const s=this._createOptimizedFeature(e.uid,t);s!=null&&(i.featureStore.add(s),u(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!F(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=A(Z(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),n=P(s,this._hasZ,!1);return new R(n,{[c]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=s=>{for(;s.length<3;)s.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(s=>s.forEach(t));break;case"polygon":i.rings.forEach(s=>s.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(t!=null)return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=G.toJSON(e),i=this._hasZ,s=new $({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new H({featureStore:s,fields:[{name:c,type:"esriFieldTypeOID",alias:c}],geometryType:t,hasM:!1,hasZ:i,objectIdField:c,spatialReference:this.spatialReference,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),u(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:n}=this._sources,o=[];return t!=null&&o.push(e(t)),i!=null&&o.push(e(i)),s!=null&&o.push(e(s)),n!=null&&o.push(e(n)),o}};a([l()],r.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],r.prototype,"layerSource",void 0),a([l({constructOnly:!0})],r.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],r.prototype,"view",void 0),a([l({readOnly:!0})],r.prototype,"updating",null),a([l({readOnly:!0})],r.prototype,"availability",void 0),a([l()],r.prototype,"_hasZ",null),a([l()],r.prototype,"_snappingElevationAligner",null),a([l()],r.prototype,"_snappingElevationFilter",null),a([l()],r.prototype,"_symbologySnappingFetcher",null),a([l()],r.prototype,"_extrudedPolygonSymbolsCount",void 0),a([l()],r.prototype,"_getGroundElevation",null),r=a([I("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],r);const c="OBJECTID";export{r as GraphicsSnappingSource};
