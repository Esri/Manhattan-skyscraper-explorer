import{eq as y,b$ as f,b_ as u,eO as M,at as p,fs as O,dA as J,aw as k,fr as G,gS as V,aA as D,fo as W,aB as _}from"./index-112c244d.js";import{m as K,g as Q,a as A,i as x,N as X}from"./External-17ec106a.js";const N=1e6,F=20*N,Y=2e9,Z=3;async function ee({data:e,name:a,description:t},s,r){let n=null;try{const o=y(s,"uploads"),i=y(o,"info"),{data:c}=await f(i,{query:{f:"json"},responseType:"json"});u(r);const l=M(s),w=c.maxUploadFileSize*N,I=l?Y:w,$=l?Math.min(F,w):F;if(e.size>I)throw new Error("Data too large");const P=y(o,"register"),{data:b}=await f(P,{query:{f:"json",itemName:a,description:t},responseType:"json",method:"post"});if(u(r),!b.success)throw new Error("Registration failed");const{itemID:R}=b.item;n=y(o,R);const C=y(n,"uploadPart"),B=Math.ceil(e.size/$),m=new Array;for(let d=0;d<B;++d)m.push(e.slice(d*$,Math.min((d+1)*$,e.size)));const h=m.slice().reverse(),E=new Array,L=async()=>{for(;h.length!==0;){const d=m.length-h.length,T=h.pop(),g=new FormData;g.append("f","json"),g.append("file",T),g.append("partId",`${d}`);const{data:H}=await f(C,{timeout:0,body:g,responseType:"json",method:"post"});if(u(r),!H.success)throw new Error("Part upload failed")}};for(let d=0;d<Z&&h.length!==0;++d)E.push(L());await Promise.all(E);const z=y(n,"commit"),{data:j}=await f(z,{query:{f:"json",parts:m.map((d,T)=>T).join(",")},responseType:"json",method:"post"});if(u(r),!j.success)throw new Error("Commit failed");return j.item}catch(o){if(n!=null){const i=y(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw o}}async function Te(e,a,t){return e.length?Promise.all(e.map(s=>te(s,a,t))):[]}async function te(e,{layer:a,ongoingUploads:t},s){const r=t.get(e);if(r)return r;if(!me(a))throw new p(`${a.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(ae(e,a))return e;const n=se(e,a,s);t.set(e,n);try{await n}finally{t.delete(e)}return e}function ae(e,a){const{parsedUrl:t}=a;return t!=null&&e.metadata.externalSources.some(s=>K(s,t))}async function se(e,a,t){const{metadata:s}=e,{displaySource:r}=s,n=U(r?.source,a),o=!!n,i=s.externalSources.length>0,c=o?oe(n,a,t):i?ne(e,a,t):re(e,a,t),l=await c;return u(t),e.addExternalSources([l]),e}async function oe(e,a,t){return{source:await v(e,a,t),original:!0}}async function ne(e,a,t){const s=q(a),{externalSources:r}=e.metadata,n=le(r,a);if(!n)throw new p(`${a.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const o=await v(n,a,t);return e.addExternalSources([{source:o,original:!0}]),{source:await ye(o,a,s)}}async function re(e,a,t){const s=ie(e,a,t);return{source:await S([s],a,t),extent:e.extent.clone(),original:!0}}async function ie(e,a,t){const s=q(a),r=await e.load(t),n=await r.toBinaryGLTF({ignoreLocalTransform:!0});u(t);const o=await n.buffer();return u(t),{blob:new Blob([o.data],{type:o.type}),assetName:`${O()}.glb`,assetType:s}}function le(e,a){for(const t of e){const s=U(t.source,a);if(s)return s}return null}function U(e,a){if(!e)return null;const{infoFor3D:{supportedFormats:t,editFormats:s}}=a,r=X(e),n=new Array;let o=!1;for(let i=0;i<r.length;++i){const c=ue(r[i],t);if(!c)return null;s.includes(c.assetType)&&(o=!0),n.push(c)}return o?n:null}function ue(e,a){const t=Q(e,a);return t?{asset:e,assetType:t}:null}async function v(e,a,t){return S(e.map(s=>ce(s,t)),a,t)}async function S(e,a,t){const s=await Promise.all(e.map(async n=>{const o=pe(await n,a,t);return u(t),o}));u(t);const{uploadResults:r}=await de(s.map(({item:n})=>n),a,t);return u(t),e.map((n,o)=>fe(s[o],r[o],a))}async function ce(e,a){const{asset:t,assetType:s}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:s};const r=await t.toBlob(a);return u(a),{blob:r,assetName:t.assetName,assetType:s}}async function pe(e,a,t){const{blob:s,assetType:r,assetName:n}=e;let o=null;try{const i=await ee({data:s,name:n},a.url,t);u(t),o={assetType:r,assetUploadId:i.itemID}}catch(i){J(i),k.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${a.url} does not support the REST Uploads API.`)}if(!o){const i=await G(s);if(u(t),!i.isBase64)throw new p(`${a.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);o={assetType:r,assetData:i.data}}if(!o)throw new p(`${a.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{item:o,assetName:n}}async function de(e,a,t){const s=await f(y(a.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(u(t),s.data.uploadResults.length!==e.length)throw new p(`${a.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${e.length} items and received ${s.data.uploadResults.length} results.`,new Error);return s.data}function fe(e,a,t){const{success:s}=a;if(!s){const{error:l}=a;throw new p(`${t.type}-layer:upload-failure`,`Failed to upload mesh file ${e.assetName}. Error code: ${l.code}. Error message: ${l.messages}`,new Error)}const{assetHash:r}=a,{assetName:n,item:{assetType:o}}=e,{infoFor3D:{supportedFormats:i}}=t,c=V(o,i);if(!c)throw new p(`${t.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${o}, but it does not list it in its supported formats.`,new Error);return new A(n,c,[new x(`${t.parsedUrl.path}/assets/${r}`,r)])}async function ye(e,a,t){const s=e.map(({assetName:l,parts:w})=>({assetName:l,assetHash:w[0].partHash})),r=a.capabilities?.operations.supportsAsyncConvert3D,n={query:{f:"json",assets:JSON.stringify(s),transportType:"esriTransportTypeUrl",targetFormat:t,async:r},responseType:"json",timeout:0},o=y(a.parsedUrl.path,"convert3D"),i=(r?await we(o,n):await f(o,n)).data,{infoFor3D:{supportedFormats:c}}=a;return i.assets.map(l=>{const w=D(l.contentType,c);if(!w)throw new p(`${a.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${w}, but it does not list it in its supported formats.`,new Error);return new A(l.assetName,l.contentType,[new x(l.assetURL,l.assetHash)])})}async function we(e,a){const t=(await f(e,a)).data.statusUrl;for(;;){const s=(await f(t,{query:{f:"json"},responseType:"json"})).data;switch(s.status){case"Completed":return f(s.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new p("async-convert3D-failed","asynchronous convert3D call failed.");case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new p("async-convert3D-failed","asynchronous convert3D call failed (undefined response status)")}await W(he)}}function me(e){return!!e.infoFor3D&&!!e.url}function q(e){const{infoFor3D:a}=e,t=D("model/gltf-binary",a.supportedFormats)??_("glb",a.supportedFormats);if(!t)throw new p(`${e.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return t}const he=1e3;export{Te as uploadAssets};
