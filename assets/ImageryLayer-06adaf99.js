import{ax as G,ty as Rt,aJ as r,aK as l,cu as P,aM as I,bB as J,bD as le,tN as re,tO as _e,tP as Oe,bt as nt,by as M,bu as X,lL as ue,lM as pe,bo as _,c5 as Fe,eM as Ce,fl as vt,lK as Ze,dX as ge,eI as at,tG as he,ae as ee,fc as ot,c4 as bt,dD as A,fg as ne,h3 as wt,dF as St,dS as xt,aT as Ft,ai as O,jN as E,bv as Me,aL as It,aZ as Dt,aC as Tt,tQ as Pt,gh as Nt,es as _t,eD as Ot,eu as Ct,dv as jt,dw as Vt,et as At,eF as $t,du as Mt,dx as Jt,dA as Et,fW as qt,eK as zt,ey as Lt,g3 as Gt,g4 as Ht,bR as Ut}from"./index-2d893400.js";import{N as v,n as ie,r as be,s as z,c as Qt,l as Bt,d as kt,u as Je,b as Wt,e as Ee,v as Kt,w as qe,j as Zt,m as Xt,p as Yt,S as ei,q as ti,k as ii,Q as ri,f as si,t as ni}from"./ImageHistogramParameters-0ba9f7e1.js";import{J as lt,w as ut,p as ai,K as oi,M as li,O as ui,n as pi,c as pt,u as ze,s as ci,L as mi,j as et,P as di,l as hi}from"./dataUtils-ccd087a6.js";import{t as tt}from"./imageBitmapUtils-f7b87637.js";import{b as Ve}from"./normalizeUtils-a826f9c0.js";import{s as yi}from"./executeQueryJSON-3cfa38f6.js";import"./pbf-200b6cb5.js";import"./AttachmentInfo-393bc8a4.js";import{s as gi,n as fi}from"./executeForIds-23a3637d.js";import"./generateRendererUtils-cb2a003c.js";import"./colorUtils-c0f43caf.js";import"./normalizeUtilsCommon-9f860a47.js";import"./query-2e00fe92.js";import"./pbfQueryUtils-2de004c2.js";const Ri={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},vi=new Set(["u1","u2","u4","u8","s8","u16","s16"]),bi={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},wi=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function ct(n){return wi.has(n.type)}function Le(n,i){if(!n||!i)return G(n||i);const a=G(n);if(a.functionDefinition&&i.rasterFunctionDefinition){const e=i.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),mt(a.functionDefinition.arguments,i),a.rasterFunctionDefinition=a.functionDefinition.toJSON()}else i.functionName?.toLowerCase()!=="none"&&(dt(a.functionArguments).Raster=i);return a}function mt(n,i){for(const a in n)a.toLowerCase()==="raster"&&(n[a].type==="RasterFunctionVariable"?(n[a]=i.rasterFunctionDefinition,n[a].type="RasterFunctionTemplate"):n[a].type==="RasterFunctionTemplate"&&mt(n[a].arguments,i))}function B(n){const i=G(Ri[n.functionName+"Function"]),a=n.functionArguments;for(const e in a)e.toLowerCase()==="raster"?(i.arguments[e]=B(a[e]),i.arguments[e].type="RasterFunctionTemplate"):e.toLowerCase()==="colormap"?(i.arguments[e].value=_i(a[e]),i.arguments.ColorSchemeType.value=0):i.arguments[e].value=a[e];return i}function Si(n,i){switch(i=i||{},n.type){case"raster-stretch":return Ii(n,i);case"class-breaks":return Di(n,i);case"unique-value":return Ti(n,i);case"raster-colormap":return Pi(n,i);case"vector-field":return xi(n,i);case"raster-shaded-relief":return Fi(n,i);case"flow":throw new Error("Unsupported rendering rule.")}}function dt(n){const i=n?.Raster;return i&&i.declaredClass==="esri.layers.support.RasterFunction"?dt(i.functionArguments):n}const Re={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function xi(n,i){const a=new v;a.functionName="VectorFieldRenderer";const{dataType:e,bandNames:t}=i,s=e==="vector-uv";let o,u;if(t&&t.length===2){const f=t.map(R=>R.toLowerCase());o=f.indexOf("magnitude"),u=f.indexOf("direction")}o!==-1&&o!==null||(o=0,u=1);const p=n.rotationType==="arithmetic"?1:2,d=n.flowRepresentation==="flow-from"?0:1,c=n.visualVariables?n.visualVariables.find(f=>f.field==="Magnitude"):new Rt,m={magnitudeBandID:o,directionBandID:u,isUVComponents:s,referenceSystem:p,massFlowAngleRepresentation:d,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:bi[n.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};a.functionArguments=m;const y=B(a);return i.convertToRFT?v.fromJSON({rasterFunctionDefinition:y}):a}function Fi(n,i){const a=i.convertToRFT;if(i.dataType!=="elevation"&&(i.dataType!=="generic"||i.bandCount!==1||i.pixelType!=="s16"&&i.pixelType!=="s32"&&i.pixelType!=="f32"&&i.pixelType!=="f64"))return new v;const e=new v;e.functionName="Hillshade";const t=n.hillshadeType==="traditional"?0:1,s=n.scalingType==="none"?1:3,o={HillshadeType:t,SlopeType:s,ZFactor:n.zFactor};return t===0&&(o.Azimuth=n.azimuth,o.Altitude=n.altitude),s===3&&(o.PSPower=n.pixelSizePower,o.PSZFactor=n.pixelSizeFactor),e.functionArguments=o,e.variableName="Raster",n.colorRamp&&(e.functionName="ShadedRelief",a?o.ColorRamp=lt(n.colorRamp):o.Colormap=ut(n.colorRamp)),a?new v({rasterFunctionDefinition:B(e)}):e}function Ii(n,i){const a=i.convertToRFT,e=new v;e.functionName="Stretch";const t=Re[ai.toJSON(n.stretchType)],s="u8",o={StretchType:t,Statistics:Ni(n.statistics??[]),DRA:n.dynamicRangeAdjustment,UseGamma:n.useGamma,Gamma:n.gamma,ComputeGamma:n.computeGamma};if(n.outputMin!=null&&(o.Min=n.outputMin),n.outputMax!=null&&(o.Max=n.outputMax),t===Re.standardDeviation?(o.NumberOfStandardDeviations=n.numberOfStandardDeviations,e.outputPixelType=s):t===Re.percentClip?(o.MinPercent=n.minPercent,o.MaxPercent=n.maxPercent,e.outputPixelType=s):t===Re.minMax?e.outputPixelType=s:t===Re.sigmoid&&(o.SigmoidStrengthLevel=n.sigmoidStrengthLevel),e.functionArguments=o,e.variableName="Raster",n.colorRamp){const u=n.colorRamp,p=new v;if(a)p.functionArguments={ColorRamp:lt(u)};else{const d=oi(u,!0);if(d)p.functionArguments={colorRamp:d};else if(!i.convertColorRampToColormap||u.type!=="algorithmic"&&u.type!=="multipart"){const c=n.colorRamp.toJSON();c.type==="algorithmic"?c.algorithm=c.algorithm||"esriCIELabAlgorithm":c.type==="multipart"&&c.colorRamps?.length&&c.colorRamps.forEach(m=>m.algorithm=m.algorithm||"esriCIELabAlgorithm"),p.functionArguments={colorRamp:c}}else p.functionArguments={Colormap:ut(u)}}return p.variableName="Raster",p.functionName="Colormap",p.functionArguments.Raster=e,a?new v({rasterFunctionDefinition:B(p)}):p}return a?new v({rasterFunctionDefinition:B(e)}):e}function Di(n,i){const a=[],e=[],t=[],s=[],{pixelType:u,rasterAttributeTable:p}=i,d=p==null?null:p.features,c=ht(p);if(c&&d&&Array.isArray(d)&&n.classBreakInfos){n.classBreakInfos.forEach((h,w)=>{const j=h.symbol?.color;let F;j?.a&&h.minValue!=null&&h.maxValue!=null&&d.forEach(b=>{h.minValue!=null&&h.maxValue!=null&&(F=b.attributes[n.field],(F>=h.minValue&&F<h.maxValue||w===n.classBreakInfos.length-1&&F>=h.minValue)&&s.push([b.attributes[c],j.r,j.g,j.b]))})});const R=u?je(s,u):s,g=new v;return g.functionName="Colormap",g.functionArguments={},g.functionArguments.Colormap=R,g.variableName="Raster",i.convertToRFT?new v({rasterFunctionDefinition:B(g)}):g}n.classBreakInfos.forEach((R,g)=>{if(R.minValue==null||R.maxValue==null)return;const h=R.symbol&&R.symbol.color;h?.a?(g===0?a.push(R.minValue,R.maxValue+1e-6):a.push(R.minValue+1e-6,R.maxValue+1e-6),e.push(g),s.push([g,h.r,h.g,h.b])):t.push(R.minValue,R.maxValue)});const m=u?je(s,u):s,y=new v;y.functionName="Remap",y.functionArguments={InputRanges:a,OutputValues:e,NoDataRanges:t},y.variableName="Raster";const f=new v;return f.functionName="Colormap",f.functionArguments={Colormap:m,Raster:y},i.convertToRFT?new v({rasterFunctionDefinition:B(f)}):f}function je(n,i){const a=vi.has(i)?li(i):null;return a&&n.push([Math.floor(a[0]-1),0,0,0],[Math.ceil(a[1]+1),0,0,0]),n}function ht(n){if(n==null)return;const{fields:i}=n,a=i&&i.find(e=>e&&e.name&&e.name.toLowerCase()==="value");return a&&a.name}function Ti(n,i){const a=[],{pixelType:e,rasterAttributeTable:t}=i,s=t==null?null:t.features,o=ht(t),u=n.defaultSymbol?.color?.toRgb(),p=n.uniqueValueInfos;if(p)if(s){if(o){const m=new Map;p.forEach(f=>{const R=f.value,g=f.symbol?.color;R!=null&&g&&g.a&&m.set(String(R),g.toRgb())});const y=n.field;s.forEach(({attributes:f})=>{const R=String(f[y]),g=f[o],h=m.get(R);h?a.push([g,...h]):u&&a.push([g,...u])})}}else for(let m=0;m<p.length;m++){const y=p[m],f=y.symbol?.color,R=+y.value;if(f?.a){if(isNaN(R))return null;a.push([R,f.r,f.g,f.b])}}const d=e&&a.length>0?je(a,e):a,c=new v;return c.functionName="Colormap",c.functionArguments={},c.functionArguments.Colormap=d,c.variableName="Raster",i.convertToRFT?new v({rasterFunctionDefinition:B(c)}):c}function Pi(n,i){const a=n.extractColormap();if(!a||a.length===0)return null;const{pixelType:e}=i,t=e?je(a,e):a,s=new v;return s.functionName="Colormap",s.functionArguments={},s.functionArguments.Colormap=t,i.convertToRFT?new v({rasterFunctionDefinition:B(s)}):s}function Ni(n){const i=[];return n?.forEach(a=>{const e=a;if(Array.isArray(e))i.push(e);else{if(e.min==null||e.max==null)return;const t=[e.min,e.max,e.avg||0,e.stddev||0];i.push(t)}}),i}function _i(n){const i=[],a=[];return n.forEach(e=>{i.push(e[0]),a.push(ui([...e.slice(1),255]))}),{type:"RasterColormap",values:i,colors:a}}let N=class extends J{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.pixelType=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(i,a,e){this.layer.version<10.3||(a[e]=i)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(i,a,e){this.format&&this.format.toLowerCase().includes("jpg")&&i!=null&&(a[e]=i)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(i,a,e){this.format==="lerc"&&i!=null&&(a[e]=i)}get format(){return this.layer.renderer?.type==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}writeLercVersion(i,a,e){this.format==="lerc"&&this.layer.version>=10.5&&(a[e]=i)}get version(){const i=this.layer;return i.commitProperty("bandIds"),i.commitProperty("format"),i.commitProperty("compressionQuality"),i.commitProperty("compressionTolerance"),i.commitProperty("interpolation"),i.commitProperty("noData"),i.commitProperty("noDataInterpretation"),i.commitProperty("mosaicRule"),i.commitProperty("rasterFunction"),i.commitProperty("adjustAspectRatio"),i.commitProperty("pixelFilter"),i.commitProperty("definitionExpression"),i.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(i){this._set("version",i)}get mosaicRule(){const i=this.layer;let a=i.mosaicRule;const e=i.definitionExpression;return a?e&&e!==a.where&&(a=a.clone(),a.where=e):e&&(a=new z({where:e})),a}get rasterFunction(){const i=this.layer;let{rasterFunction:a}=i;const e=i.pixelFilter,t=!i.format||i.format.includes("jpg")||i.format.includes("png");a=this._addResampleRasterFunction(a);const s=i.multidimensionalSubset?.areaOfInterest;return s&&(a=this._addClipFunction(a,s)),t&&!e&&i.renderer?.type!=="vector-field"&&(a=this.combineRendererWithRenderingRule(a)),a}combineRendererWithRenderingRule(i){const a=this.layer,{rasterInfo:e,renderer:t}=a;return i=i||a.rasterFunction,!t||!ct(t)?i:Le(Si(t,{rasterAttributeTable:e.attributeTable,pixelType:e.pixelType,dataType:e.dataType,bandNames:e.bandInfos.map(({name:s})=>s),convertColorRampToColormap:a.version<10.6,convertToRFT:!!i?.rasterFunctionDefinition,bandCount:e.bandCount}),i)}_addResampleRasterFunction(i){if(this.layer.renderer?.type!=="vector-field"||i?.functionName==="Resample")return i;const a=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,e=this.layer.serviceRasterInfo.pixelSize;let t=new v({functionName:"Resample",functionArguments:{ResamplingType:a,InputCellSize:e}});return t=i?.rasterFunctionDefinition?new v({rasterFunctionDefinition:B(t)}):t,Le(t,i)}_addClipFunction(i,a){const e=new v({functionName:"Clip",functionArguments:{ClippingGeometry:a.toJSON(),ClippingType:1}});return Le(e,i)}};r([l()],N.prototype,"layer",void 0),r([l({json:{write:!0}})],N.prototype,"adjustAspectRatio",null),r([P("adjustAspectRatio")],N.prototype,"writeAdjustAspectRatio",null),r([l({json:{write:!0}})],N.prototype,"bandIds",null),r([l({json:{write:!0}})],N.prototype,"compression",void 0),r([l({json:{write:!0}})],N.prototype,"compressionQuality",null),r([P("compressionQuality")],N.prototype,"writeCompressionQuality",null),r([l({json:{write:!0}})],N.prototype,"compressionTolerance",null),r([P("compressionTolerance")],N.prototype,"writeCompressionTolerance",null),r([l({json:{write:!0}})],N.prototype,"format",null),r([l({type:String,json:{read:{reader:ie.read},write:{writer:ie.write}}})],N.prototype,"interpolation",null),r([l({json:{write:!0}})],N.prototype,"noData",null),r([l({type:String,json:{read:{reader:be.read},write:{writer:be.write}}})],N.prototype,"noDataInterpretation",null),r([l({json:{write:!0}})],N.prototype,"pixelType",void 0),r([l({json:{write:!0}})],N.prototype,"lercVersion",void 0),r([P("lercVersion")],N.prototype,"writeLercVersion",null),r([l({type:Number})],N.prototype,"version",null),r([l({json:{write:!0}})],N.prototype,"mosaicRule",null),r([l({json:{write:!0,name:"renderingRule"}})],N.prototype,"rasterFunction",null),N=r([I("esri.layers.mixins.ExportImageServiceParameters")],N);let ce=class extends J{constructor(i){super(i),this.north=null,this.up=null,this.spatialReference=null}};r([l({type:Number,json:{write:!0}})],ce.prototype,"north",void 0),r([l({type:Number,json:{write:!0}})],ce.prototype,"up",void 0),r([l({type:le,json:{write:!0}})],ce.prototype,"spatialReference",void 0),ce=r([I("esri.rest.support.ImageAngleResult")],ce);const Oi=ce;let Y=class extends J{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};r([l({type:Number,json:{read:!0,write:!0}})],Y.prototype,"value",void 0),r([l({type:String,json:{read:!0,write:!0}})],Y.prototype,"displayValue",void 0),r([l({type:Number,json:{read:!0,write:!0}})],Y.prototype,"uncertainty",void 0),Y=r([I("esri.rest.support.ImageMeasureResultValue")],Y);let ye=class extends Y{constructor(){super(...arguments),this.unit=null}};r([l({type:String,json:{read:re.read,write:re.write}})],ye.prototype,"unit",void 0),ye=r([I("esri.rest.support.ImageMeasureResultLengthValue")],ye);let Ie=class extends Y{constructor(){super(...arguments),this.unit=null}};r([l({type:String,json:{read:_e.read,write:_e.write}})],Ie.prototype,"unit",void 0),Ie=r([I("esri.rest.support.ImageMeasureResultAreaValue")],Ie);let we=class extends Y{constructor(){super(...arguments),this.unit=null}};r([l({type:String,json:{read:Oe.read,write:Oe.write}})],we.prototype,"unit",void 0),we=r([I("esri.rest.support.ImageMeasureResultAngleValue")],we);let te=class extends J{constructor(){super(...arguments),this.name=null,this.sensorName=null}};r([l({type:String,json:{read:!0,write:!0}})],te.prototype,"name",void 0),r([l({type:String,json:{read:!0,write:!0}})],te.prototype,"sensorName",void 0),te=r([I("esri.rest.support.BaseImageMeasureResult")],te);let ve=class extends te{constructor(){super(...arguments),this.area=null,this.perimeter=null}};r([l({type:Ie,json:{read:!0,write:!0}})],ve.prototype,"area",void 0),r([l({type:ye,json:{read:!0,write:!0}})],ve.prototype,"perimeter",void 0),ve=r([I("esri.rest.support.ImageAreaResult")],ve);const Ci=ve;let me=class extends te{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};r([l({type:ye,json:{read:!0,write:!0}})],me.prototype,"distance",void 0),r([l({type:we,json:{read:!0,write:!0}})],me.prototype,"azimuthAngle",void 0),r([l({type:we,json:{read:!0,write:!0}})],me.prototype,"elevationAngle",void 0),me=r([I("esri.rest.support.ImageDistanceResult")],me);const ji=me;let De=class extends te{constructor(){super(...arguments),this.height=null}};r([l({type:ye,json:{read:!0,write:!0}})],De.prototype,"height",void 0),De=r([I("esri.rest.support.ImageHeightResult")],De);const Vi=De;let H=class extends J{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};r([l({json:{write:!0}})],H.prototype,"catalogItemVisibilities",void 0),r([l({type:nt,json:{write:!0}})],H.prototype,"catalogItems",void 0),r([l({type:M,json:{write:!0}})],H.prototype,"location",void 0),r([l({json:{write:!0}})],H.prototype,"name",void 0),r([l({json:{write:!0}})],H.prototype,"objectId",void 0),r([l({json:{write:!0}})],H.prototype,"processedValues",void 0),r([l({json:{write:!0}})],H.prototype,"properties",void 0),r([l({json:{write:!0}})],H.prototype,"value",void 0),H=r([I("esri.rest.support.ImageIdentifyResult")],H);const Ai=H;let Te=class extends J{constructor(){super(...arguments),this.geometries=null}};r([l({json:{write:!0}})],Te.prototype,"geometries",void 0),Te=r([I("esri.rest.support.ImagePixelLocationResult")],Te);const $i=Te;let Pe=class extends te{constructor(){super(...arguments),this.point=null}};r([l({type:M,json:{name:"point.value",read:!0,write:!0}})],Pe.prototype,"point",void 0),Pe=r([I("esri.rest.support.ImagePointResult")],Pe);const Mi=Pe;let W=class extends J{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};r([l({json:{write:!0}})],W.prototype,"attributes",void 0),r([l({type:M,json:{write:!0}})],W.prototype,"location",void 0),r([l({json:{write:!0}})],W.prototype,"locationId",void 0),r([l({json:{write:!0}})],W.prototype,"rasterId",void 0),r([l({json:{write:!0}})],W.prototype,"resolution",void 0),r([l({json:{write:!0}})],W.prototype,"pixelValue",void 0),W=r([I("esri.rest.support.ImageSample")],W);const Ji=W;let Ne=class extends J{constructor(){super(...arguments),this.samples=null}};r([l({type:[Ji],json:{write:!0}})],Ne.prototype,"samples",void 0),Ne=r([I("esri.rest.support.ImageSampleResult")],Ne);const Ei=Ne;function yt(n){const i=n?.time;if(i&&(i.start!=null||i.end!=null)){const a=[];i.start!=null&&a.push(i.start),i.end==null||a.includes(i.end)||a.push(i.end),n.time=a.join(",")}}async function gt(n,i,a){const e=X(n),t=i.geometry?[i.geometry]:[],s=await Ve(t),o=i.toJSON();yt(o);const u=s&&s[0];u!=null&&(o.geometry=u.toJSON());const p=ue({...e.query,f:"json",...o});return pe(p,a)}async function qi(n,i,a){const e=i.toJSON();e.angleName!=null&&(e.angleName=e.angleName.join(",")),i.point!=null&&i.point.spatialReference?.imageCoordinateSystem&&(e.point.spatialReference=$e(i.point.spatialReference)),i.spatialReference!=null&&i.spatialReference.imageCoordinateSystem&&(e.spatialReference=ft(i.spatialReference));const t=X(n),s=ue({...t.query,f:"json",...e}),o=pe(s,a),{data:u}=await _(`${t.path}/computeAngles`,o);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new le({wkid:0,imageCoordinateSystem:u.spatialReference}):le.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new Oi(u)}async function zi(n,i,a){const e=i.toJSON(),{geometries:t}=i;if(t)for(let d=0;d<t.length;d++)t[d].spatialReference?.imageCoordinateSystem&&(e.geometries.geometries[d].spatialReference=$e(t[d].spatialReference));const s=X(n),o=ue({...s.query,f:"json",...e}),u=pe(o,a),{data:p}=await _(`${s.path}/computePixelLocation`,u);return $i.fromJSON(p)}async function Li(n,i,a){const e=await gt(n,i,a),t=X(n),{data:s}=await _(`${t.path}/computeStatisticsHistograms`,e),{statistics:o}=s;return o?.length&&o.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:o,histograms:s.histograms}}async function Gi(n,i,a){const e=await gt(n,i,a),t=X(n),{data:s}=await _(`${t.path}/computeHistograms`,e);return{histograms:s.histograms}}async function Hi(n,i,a){const e=i.toJSON();yt(e),e.outFields?.length&&(e.outFields=e.outFields.join(","));const t=await Ve(i.geometry),s=t?.[0];s!=null&&(e.geometry=s.toJSON());const o=X(n),u=ue({...o.query,f:"json",...e}),p=pe(u,a),{data:d}=await _(`${o.path}/getSamples`,p),c=d?.samples?.map(m=>{const y=m.value==="NaN"||m.value===""?null:m.value.split(" ").map(f=>Number(f));return{...m,pixelValue:y}});return Ei.fromJSON({samples:c})}async function it(n,i,a){const e=X(n),t=i.geometry?[i.geometry]:[];return Ve(t).then(s=>{const o=i.toJSON(),u=s&&s[0];u!=null&&(o.geometry=JSON.stringify(u.toJSON()));const p=ue({...e.query,f:"json",...o}),d=pe(p,a);return _(e.path+"/identify",d)}).then(s=>Ai.fromJSON(s.data))}async function Ui(n,i,a){const e=await Ae(n,i,[i.fromGeometry,i.toGeometry],a);return Vi.fromJSON(e)}async function Qi(n,i,a){const e=await Ae(n,i,[i.geometry],a);return Ci.fromJSON(e)}async function Bi(n,i,a){const e=await Ae(n,i,[i.geometry],a);return Mi.fromJSON(e)}async function ki(n,i,a){const e=await Ae(n,i,[i.fromGeometry,i.toGeometry],a);return ji.fromJSON(e)}async function Ae(n,i,a,e){const t=X(n),s=await Ve(a),o=i.toJSON();s[0]!=null&&(o.fromGeometry=JSON.stringify(rt(s[0]))),s[1]!=null&&(o.toGeometry=JSON.stringify(rt(s[1])));const u=ue({...t.query,f:"json",...o}),p=pe(u,e),{data:d}=await _(t.path+"/measure",p);return d}function rt(n){const i=n.toJSON();return n.spatialReference?.imageCoordinateSystem&&(i.spatialReference=$e(n.spatialReference)),i}function $e(n){const{imageCoordinateSystem:i}=n;if(i){const{id:a,referenceServiceName:e}=i;return a!=null?e?{icsid:a,icsns:e}:{icsid:a}:{ics:i}}return n.toJSON()}function ft(n,i){const a=$e(n),{icsid:e,icsns:t,wkid:s}=a;return e!=null?t==null||i?.toLowerCase().includes("/"+t.toLowerCase()+"/")?`0:${e}`:JSON.stringify(a):s?s.toString():JSON.stringify(a)}async function Wi(n,i,a){const e=X(n),t=ue({...e?.query,f:"json"}),s=pe(t,a),o=`${e?.path}/${i}/info`,u=_(`${o}`,s),p=_(`${o}/keyProperties`,s),d=await Promise.allSettled([u,p]),c=d[0].status==="fulfilled"?d[0].value.data:null,m=d[1].status==="fulfilled"?d[1].value.data:null;let y=null;c.statistics?.length&&(y=c.statistics.map(b=>({min:b[0],max:b[1],avg:b[2],stddev:b[3]})));const f=Fe.fromJSON(c.extent),R=Math.ceil(f.width/c.pixelSizeX-.1),g=Math.ceil(f.height/c.pixelSizeY-.1),h=f.spatialReference,w=new M({x:c.pixelSizeX,y:c.pixelSizeY,spatialReference:h}),j=c.histograms?.length?c.histograms:null,F=new pi({origin:c.origin,blockWidth:c.blockWidth,blockHeight:c.blockHeight,firstPyramidLevel:c.firstPyramidLevel,maximumPyramidLevel:c.maxPyramidLevel});return new pt({width:R,height:g,bandCount:c.bandCount,extent:f,spatialReference:h,pixelSize:w,pixelType:c.pixelType.toLowerCase(),statistics:y,histograms:j,keyProperties:m,storageInfo:F})}var Ge;let ae=Ge=class extends J{constructor(n){super(n),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new Ge(G({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};r([l({type:[String],json:{name:"angleName",write:!0}})],ae.prototype,"angleNames",void 0),r([l({type:M,json:{write:!0}})],ae.prototype,"point",void 0),r([l({type:le,json:{write:!0}})],ae.prototype,"spatialReference",void 0),r([l({type:Ce,json:{write:!0}})],ae.prototype,"rasterId",void 0),ae=Ge=r([I("esri.rest.support.ImageAngleParameters")],ae);const Ki=ae,L=new vt({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let U=class extends J{constructor(){super(...arguments),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};r([l()],U.prototype,"type",void 0),r([l({type:L.apiValues,json:{read:L.read,write:L.write}})],U.prototype,"measureOperation",void 0),r([l({type:z,json:{write:!0}})],U.prototype,"mosaicRule",void 0),r([l({type:M,json:{write:!0}})],U.prototype,"pixelSize",void 0),r([l({json:{write:!0}})],U.prototype,"raster",void 0),U=r([I("esri.rest.support.BaseImageMeasureParameters")],U);var He;let K=He=class extends U{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(n,i,a){n!=null&&(i.geometryType=ge(n),i[a]=n.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new He(G({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({types:Ze,json:{name:"fromGeometry",read:!0,write:!0}})],K.prototype,"geometry",void 0),r([P("geometry")],K.prototype,"writeGeometry",null),r([l({type:L.apiValues,json:{write:L.write}})],K.prototype,"measureOperation",null),r([l({json:{read:!0}})],K.prototype,"is3D",void 0),r([l({type:String,json:{read:re.read,write:re.write}})],K.prototype,"linearUnit",void 0),r([l({type:String,json:{read:_e.read,write:_e.write}})],K.prototype,"areaUnit",void 0),K=He=r([I("esri.rest.support.ImageAreaParameters")],K);const Zi=K;var Ue;let Q=Ue=class extends U{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(n,i,a){n!=null&&(i.geometryType=ge(n),i[a]=n.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new Ue(G({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({type:M,json:{read:!0,write:!0}})],Q.prototype,"fromGeometry",void 0),r([P("fromGeometry")],Q.prototype,"writeFromGeometry",null),r([l({type:M,json:{read:!0,write:!0}})],Q.prototype,"toGeometry",void 0),r([l({type:L.apiValues,json:{write:L.write}})],Q.prototype,"measureOperation",null),r([l({json:{read:!0}})],Q.prototype,"is3D",void 0),r([l({type:String,json:{read:re.read,write:re.write}})],Q.prototype,"linearUnit",void 0),r([l({type:String,json:{read:Oe.read,write:Oe.write}})],Q.prototype,"angularUnit",void 0),Q=Ue=r([I("esri.rest.support.ImageDistanceParameters")],Q);const Xi=Q;var Qe;let Z=Qe=class extends U{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(n,i,a){n!=null&&(i.geometryType=ge(n),i[a]=n.toJSON())}get measureOperation(){return this.operationType}clone(){return new Qe(G({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({type:M,json:{read:!0}})],Z.prototype,"fromGeometry",void 0),r([P("fromGeometry")],Z.prototype,"writeFromGeometry",null),r([l({type:M,json:{read:!0,write:!0}})],Z.prototype,"toGeometry",void 0),r([l({type:L.apiValues,json:{write:L.write}})],Z.prototype,"measureOperation",null),r([l({json:{read:!0}})],Z.prototype,"operationType",void 0),r([l({type:String,json:{read:re.read,write:re.write}})],Z.prototype,"linearUnit",void 0),Z=Qe=r([I("esri.rest.support.ImageHeightParameters")],Z);const Yi=Z;var Be;let D=Be=class extends J{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(n,i,a){n!=null&&(i.geometryType=ge(n),i[a]=JSON.stringify(n.toJSON()))}set mosaicRule(n){let i=n;i&&i.mosaicMethod&&(i=z.fromJSON({...i.toJSON(),mosaicMethod:i.mosaicMethod,mosaicOperation:i.mosaicOperation})),this._set("mosaicRule",i)}writeMosaicRule(n,i,a){n!=null&&(i[a]=JSON.stringify(n.toJSON()))}get renderingRule(){return he(ee.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._get("rasterFunction")}set renderingRule(n){he(ee.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",n)}get renderingRules(){return he(ee.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._get("rasterFunctions")}set renderingRules(n){he(ee.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._set("rasterFunctions",n)}set rasterFunction(n){let i=n;i&&i.rasterFunction&&(i=v.fromJSON({...i.toJSON(),rasterFunction:i.rasterFunction,rasterFunctionArguments:i.rasterFunctionArguments})),this._set("rasterFunction",i)}writeRasterFunction(n,i,a){n!=null&&(i[a]=JSON.stringify(n.toJSON())),n.rasterFunctionDefinition&&(i[a]=JSON.stringify(n.rasterFunctionDefinition))}writeRasterFunctions(n,i,a){n!=null&&(i[a]=JSON.stringify(n.map(e=>e.rasterFunctionDefinition||e.toJSON())))}writePixelSize(n,i,a){n!=null&&(i[a]=JSON.stringify(n))}writeTimeExtent(n,i,a){if(n!=null){const e=n.start!=null?n.start.getTime():null,t=n.end!=null?n.end.getTime():null;i[a]=e!=null?t!=null?`${e},${t}`:`${e}`:null}}clone(){return new Be(G({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};r([l({json:{write:!0}})],D.prototype,"geometry",void 0),r([P("geometry")],D.prototype,"writeGeometry",null),r([l({type:z,json:{write:!0}})],D.prototype,"mosaicRule",null),r([P("mosaicRule")],D.prototype,"writeMosaicRule",null),r([l({type:v})],D.prototype,"renderingRule",null),r([l({type:[v]})],D.prototype,"renderingRules",null),r([l({type:v,json:{write:!0,name:"renderingRule"}})],D.prototype,"rasterFunction",null),r([P("rasterFunction")],D.prototype,"writeRasterFunction",null),r([l({type:[v],json:{write:!0,name:"renderingRules"}})],D.prototype,"rasterFunctions",void 0),r([P("rasterFunctions")],D.prototype,"writeRasterFunctions",null),r([l({type:M,json:{write:!0}})],D.prototype,"pixelSize",void 0),r([P("pixelSize")],D.prototype,"writePixelSize",null),r([l({type:Boolean,json:{write:!0}})],D.prototype,"returnGeometry",void 0),r([l({type:Boolean,json:{write:!0}})],D.prototype,"returnCatalogItems",void 0),r([l({type:Boolean,json:{write:!0}})],D.prototype,"returnPixelValues",void 0),r([l({type:Number,json:{write:!0}})],D.prototype,"maxItemCount",void 0),r([l({type:at,json:{write:{target:"time"}}})],D.prototype,"timeExtent",void 0),r([P("timeExtent")],D.prototype,"writeTimeExtent",null),r([l({json:{write:!0}})],D.prototype,"raster",void 0),r([l({json:{write:!0}})],D.prototype,"viewId",void 0),r([l({type:Boolean,json:{write:!0}})],D.prototype,"processAsMultidimensional",void 0),D=Be=r([I("esri.rest.support.ImageIdentifyParameters")],D);const st=D;var ke;let de=ke=class extends J{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(n,i,a){i.geometries={geometryType:"esriGeometryPoint",geometries:n.map(e=>e.toJSON())}}clone(){return new ke({geometries:this.geometries?.map(n=>n.clone())??[],rasterId:this.rasterId})}};r([l({type:[M],json:{write:!0}})],de.prototype,"geometries",void 0),r([P("geometries")],de.prototype,"writeGeometry",null),r([l({type:Ce,json:{write:!0}})],de.prototype,"rasterId",void 0),de=ke=r([I("esri.rest.support.ImagePixelLocationParameters")],de);const er=de;var We;let oe=We=class extends U{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(n,i,a){n!=null&&(i.geometryType=ge(n),i[a]=n.toJSON())}get measureOperation(){const{is3D:n,geometry:i}=this;return i.type==="point"?n?"point-3D":"point":n?"centroid-3D":"centroid"}clone(){return new We(G({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({types:Ze,json:{name:"fromGeometry",read:ot}})],oe.prototype,"geometry",void 0),r([P("geometry")],oe.prototype,"writeGeometry",null),r([l({type:L.apiValues,json:{read:L.read,write:L.write}})],oe.prototype,"measureOperation",null),r([l({json:{read:!0}})],oe.prototype,"is3D",void 0),oe=We=r([I("esri.rest.support.ImagePointParameters")],oe);const tr=oe;var Ke;let C=Ke=class extends J{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(n,i,a){n!=null&&(i.geometryType=ge(n),i[a]=n.toJSON())}set locations(n){if(n?.length){const i=new bt({spatialReference:n[0].spatialReference});i.points=n.map(a=>[a.x,a.y]),this._set("locations",n),this.geometry=i}}clone(){return new Ke(G({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};r([l({types:Ze,json:{read:ot}})],C.prototype,"geometry",void 0),r([P("geometry")],C.prototype,"writeGeometry",null),r([l()],C.prototype,"locations",null),r([l({type:String,json:{type:ie.jsonValues,read:ie.read,write:ie.write}})],C.prototype,"interpolation",void 0),r([l({type:z,json:{write:!0}})],C.prototype,"mosaicRule",void 0),r([l({type:[String],json:{write:!0}})],C.prototype,"outFields",void 0),r([l({type:M,json:{write:!0}})],C.prototype,"pixelSize",void 0),r([l({type:String,json:{write:!0}})],C.prototype,"raster",void 0),r([l({type:Boolean,json:{write:!0}})],C.prototype,"returnFirstValueOnly",void 0),r([l({type:Number,json:{write:!0}})],C.prototype,"sampleDistance",void 0),r([l({type:Number,json:{write:!0}})],C.prototype,"sampleCount",void 0),r([l({type:Number,json:{write:!0}})],C.prototype,"sliceId",void 0),r([l({type:at,json:{read:{source:"time"},write:{target:"time"}}})],C.prototype,"timeExtent",void 0),C=Ke=r([I("esri.rest.support.ImageSampleParameters")],C);const ir=C,rr=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),sr=Pt(Nt,{min:0,max:255});function nr(n){if(!n)return null;const i=JSON.stringify(n).match(/"rasterFunction":"(.*?")/gi),a=i?.map(e=>e.replace('"rasterFunction":"',"").replace('"',""));return a?a.join("/"):null}const ar=n=>{let i=class extends n{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this._rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new N({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(s=>typeof s=="number"))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,s){e!=null&&this.format!=="lerc"&&(t[s]=e)}writeCompressionTolerance(e,t,s){this.format==="lerc"&&e!=null&&(t[s]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?z.fromJSON(t):null}get fieldsIndex(){return this.fields?new xt(this.fields):null}set format(e){e&&rr.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return t.serviceDataType==="esriImageServiceDataTypeVector-UV"||t.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}readMaxScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=z.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const s=e||t.mosaicRule;return s?z.fromJSON(s):this._isMosaicRuleSupported(t)?z.fromJSON(t):null}writeMosaicRule(e,t,s){let o=this.mosaicRule;const u=this.definitionExpression;o?u&&u!==o.where&&(o=o.clone(),o.where=u):u&&(o=new z({where:u})),this._isValidCustomizedMosaicRule(o)&&(t[s]=o.toJSON())}writeNoData(e,t,s){e!=null&&typeof e=="number"&&(t[s]=sr(e))}readObjectIdField(e,t){if(!e){const s=t.fields.filter(o=>o.type==="esriFieldTypeOID"||o.type==="oid");e=s&&s[0]&&s[0].name}return e}get parsedUrl(){return Ft(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}set renderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("renderer",e)}readRenderer(e,t,s){const o=t?.layerDefinition?.drawingInfo?.renderer,u=Wt(o,s);return u==null?null:(u.type==="vector-field"&&t.symbolTileSize&&!o.symbolTileSize&&(u.symbolTileSize=t.symbolTileSize),ct(u)||ee.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),u)}writeRenderer(e,t,s){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this._rasterAttributeTableFieldPrefix||"Raster.",t=new ne({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),s=new ne({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),o=new ne({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let u=this.fields?G(this.fields):[];u.push(s),this.capabilities?.operations.supportsQuery&&this.fields&&this.fields.length>0&&u.push(t),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(d=>d.name.toLowerCase()==="none")&&u.push(o),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(d=>d.name.toLowerCase()!=="none").forEach(d=>{u.push(new ne({name:"Raster.ServicePixelValue."+d.name,alias:d.name,domain:null,editable:!1,length:50,type:"string"}))}),this._isVectorDataSet()&&(u.push(new ne({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),u.push(new ne({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const{attributeTable:p}=this.rasterInfo??{};if(p!=null){const d=p.fields.filter(c=>c.type!=="esriFieldTypeOID"&&c.name.toLowerCase()!=="value").map(c=>{const m=G(c);return m.name=e+c.name,m});u=u.concat(d)}return u}get renderingRule(){return he(ee.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._get("rasterFunction")}set renderingRule(e){he(ee.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",e)}set rasterFunction(e){let t=e;t&&t.rasterFunction&&(t=v.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const s=t.rasterFunctionInfos;return t.renderingRule||s&&s.length&&s[0].name!=="None"?this._isRFTJson(t.renderingRule)?v.fromJSON({rasterFunctionDefinition:t.renderingRule}):v.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const s=e||t.extent.spatialReference;return s?le.fromJSON(s):null}readPixelType(e){return Je.fromJSON(e)||e}writePixelType(e,t,s){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(t[s]=Je.toJSON(e))}readVersion(e,t){let s=t.currentVersion;return s||(s=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),s}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let s=e;const{renderer:o,symbolizer:u,pixelFilter:p,bandIds:d}=this;if(!this._isPicture()&&o&&u&&!p){const c=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(o.toJSON()),m=this._rasterJobHandler.instance;if(m){c&&(u.bind(),await m.updateSymbolizer(u,t),this._cachedRendererJson=o.toJSON());const y=await m.symbolize({bandIds:d,...e},t);s={extent:e.extent,pixelBlock:y}}else s={extent:e.extent,pixelBlock:u.symbolize({bandIds:d,...e})}}return s}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeAngles(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeAngles)throw new O("imagery-layer:compute-angles","this operation is not supported on the input image service");return e=E(Ki,e).clone(),qi(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputePixelLocation)throw new O("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=E(er,e).clone(),zi(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeHistograms)throw new O("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=E(Ee,e).clone(),this._applyMosaicAndRenderingRules(e),Gi(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeStatisticsHistograms)throw new O("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=E(Ee,e).clone(),this._applyMosaicAndRenderingRules(e),Li(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const s=await this._fetchCapabilities(t?.signal);if(!(e.operationType==="base-and-top"?s.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?s.mensuration.supportsHeightFromBaseAndTopShadow:s.mensuration.supportsHeightFromTopAndTopShadow))throw new O("imagery-layer:measure-height","this operation is not supported on the input image service");return e=E(Yi,e).clone(),this._applyMosaicAndRenderingRules(e),Ui(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const s=await this._fetchCapabilities(t?.signal);if(!(s.mensuration.supportsAreaAndPerimeter&&(!e.is3D||s.mensuration.supports3D)))throw new O("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=E(Zi,e).clone(),this._applyMosaicAndRenderingRules(e),Qi(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const s=await this._fetchCapabilities(t?.signal);if(!(s.mensuration.supportsDistanceAndAngle&&(!e.is3D||s.mensuration.supports3D)))throw new O("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=E(Xi,e).clone(),this._applyMosaicAndRenderingRules(e),ki(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const s=await this._fetchCapabilities(t?.signal);if(!(s.mensuration.supportsPointOrCentroid&&(!e.is3D||s.mensuration.supports3D)))throw new O("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=E(tr,e).clone(),this._applyMosaicAndRenderingRules(e),Bi(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return t?.get(e)}getFieldDomain(e,t){const s=this.getField(e);return s?s.domain:null}async fetchImage(e,t,s,o={}){if(e==null||t==null||s==null)throw new O("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const m=await this._generateRasterInfo(this.rasterFunction,{signal:o.signal});m&&(this.rasterInfo=m)}const u=this.getExportImageServiceParameters(e,t,s,o.timeExtent);if(u==null){if(o.requestAsImageElement&&this._canRequestImageElement(this.format)){const w=document.createElement("canvas");return w.width=t,w.height=s,o.returnImageBitmap?{imageBitmap:await tt(w,`${a(this.parsedUrl)}/exportImage`,o.signal)}:{imageOrCanvasElement:w}}const{bandIds:m,rasterInfo:y}=this,f=(m?.length||y.bandCount)??0,R=t*s,g=y.pixelType,h=[];for(let w=0;w<f;w++)h.push(ze.createEmptyBand(g,R));return{pixelData:{pixelBlock:new ze({width:t,height:s,pixels:h,mask:new Uint8Array(R),pixelType:g}),extent:e}}}const p=!!o.requestAsImageElement&&!this.pixelFilter,d=p&&!!o.returnImageBitmap,c={imageServiceParameters:u,imageProps:{extent:e,width:t,height:s,format:this.format},requestAsImageElement:p,returnImageBitmap:d,signal:o.signal};return this._requestArrayBuffer(c)}fetchKeyProperties(e){return _(a(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(t=>t.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new O("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):_(a(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(t=>nt.fromJSON(t.data))}getCatalogItemRasterInfo(e,t){const s={...t,query:this._getQueryParams()};return Wi(a(this.parsedUrl),e,s)}async getCatalogItemICSInfo(e,t){const{data:s}=await _(a(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),o=s&&s.ics;if(!o)return;let u=null;try{u=(await _(a(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!u||!u.spatialReference)return{ics:o,icsToPixelTransform:null,icsExtent:null,northDirection:null};const p=this.version>=10.7?_(a(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(S=>S.data).catch(()=>({})):{},d=u.spatialReference,c={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[u]}),inSR:d.wkid||JSON.stringify(d),outSR:"0:"+e},m=_(a(this.parsedUrl)+"/project",{query:this._getQueryParams(c),...t}).then(S=>S.data).catch(()=>({})),y=5,f=(u.xmin+u.xmax)/2,R=(u.ymax-u.ymin)/(y+1),g=u.ymin+R,h=[];for(let S=0;S<y;S++)h.push({x:f,y:g+R*S});const w={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:h}),inSR:d.wkid||JSON.stringify(d),outSR:"0:"+e},j=_(a(this.parsedUrl)+"/project",{query:this._getQueryParams(w),...t}).then(S=>S.data).catch(()=>({})),F=await Promise.all([p,m,j]);let b=F[0].ipxf;if(b==null){const S=o.geodataXform?.xf_0;S?.name?.toLowerCase()==="topup"&&S?.coefficients?.length===6&&(b={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:S.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const T=Fe.fromJSON(F[1]&&F[1].geometries&&F[1].geometries[0]);T&&(T.spatialReference=new le({wkid:0,imageCoordinateSystem:o}));const x=F[2].geometries?F[2].geometries.filter(S=>S!=null&&S.x!=null&&S.y!=null&&S.x!=="NaN"&&S.y!=="NaN"):[],V=x.length;if(V<3)return{ics:o,icsToPixelTransform:b,icsExtent:T,northDirection:null};let se=0,Se=0,xe=0,fe=0;for(let S=0;S<V;S++)se+=x[S].x,Se+=x[S].y,xe+=x[S].x*x[S].x,fe+=x[S].x*x[S].y;const $=(V*fe-se*Se)/(V*xe-se*se);let k=0;const Xe=x[y-1].x>x[0].x,Ye=x[y-1].y>x[0].y;return $===1/0?k=Ye?90:270:$===0?k=Xe?0:180:$>0?k=Xe?180*Math.atan($)/Math.PI:180*Math.atan($)/Math.PI+180:$<0&&(k=Ye?180+180*Math.atan($)/Math.PI:360+180*Math.atan($)/Math.PI),{ics:o,icsToPixelTransform:b,icsExtent:T,northDirection:k}}async generateRasterInfo(e,t){if(e=E(v,e),this.serviceRasterInfo&&(!e||e.functionName?.toLowerCase()==="none"||this._isVectorFieldResampleFunction(e)))return this.serviceRasterInfo;const s=nr(e);if(!s)throw new O("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[s])return this._functionRasterInfos[s];const o={...t,query:this._getQueryParams()},u=Kt(a(this.parsedUrl),e,o);this._functionRasterInfos[s]=u;try{return await u}catch(p){throw this._functionRasterInfos[s]=null,p}}getExportImageServiceParameters(e,t,s,o){e=e.clone().shiftCentralMeridian();const u=ft(e.spatialReference,a(this.parsedUrl));this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const p=this.exportImageServiceParameters.toJSON(),{bandIds:d,noData:c}=p;let{renderingRule:m}=p;const y=this.rasterFunction?.rasterFunctionDefinition,f=!this.renderer||this.renderer.type==="raster-stretch";if(d?.length&&this._hasRasterFunction(this.rasterFunction)&&!y&&f){const h={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:d}};if(m.rasterFunction==="Stretch")h.rasterFunctionArguments.Raster=m.rasterFunctionArguments.Raster,m.rasterFunctionArguments.Raster=h;else if(m.rasterFunction==="Colormap"){const w=m.rasterFunctionArguments.Raster;w?.rasterFunction==="Stretch"?(h.rasterFunctionArguments.Raster=w.rasterFunctionArguments.Raster,w.rasterFunctionArguments.Raster=h):(h.rasterFunctionArguments.Raster=w,m.rasterFunctionArguments.Raster=h)}else h.rasterFunctionArguments.Raster=m,m=h;p.bandIds=void 0}else p.bandIds=d?.join(",");c instanceof Array&&c.length>0&&(p.noData=c.join(","));const R=this._processMultidimensionalIntersection(null,o,this.exportImageServiceParameters.mosaicRule);if(R.isOutSide)return null;p.mosaicRule=R.mosaicRule!=null?JSON.stringify(R.mosaicRule):null,o=R.timeExtent,p.renderingRule=this._getRenderingRuleString(v.fromJSON(m));const g={};if(o!=null){const{start:h,end:w}=o.toJSON();h&&w&&h===w?g.time=""+h:h==null&&w==null||(g.time=`${h??"null"},${w??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:t+","+s,...p,...g}}async getSamples(e,t){if(!(await this._fetchCapabilities(t?.signal))?.operations.supportsGetSamples)throw new O("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=E(ir,e).clone();const{raster:o}=this;return o&&e.raster==null&&(e.raster=o),Hi(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsIdentify)throw new O("imagery-layer:identify","identify operation is not supported on the input image service");e=E(st,e).clone();const s=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(s.isOutSide)throw new O("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=s.timeExtent,e.mosaicRule=s.mosaicRule;const{raster:o,rasterFunction:u}=this;return u&&e.rasterFunction==null&&(e.rasterFunction=u),o&&e.raster==null&&(e.raster=o),it(this.url,e,this._getRequestOptions(t))}createQuery(){const e=new Me;return e.outFields=["*"],e.returnGeometry=!0,e.where=this.definitionExpression||"1=1",e}async queryRasters(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),yi(this.url,e,t)}async queryObjectIds(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),gi(this.url,e,t)}async queryRasterCount(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),fi(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new O("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:s,returnDomainValues:o,returnTopmostRaster:u,showNoDataRecords:p}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let d=!1,c=null,m=null;const y="raster.servicepixelvalue",f=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(d=e.outFields.some(b=>!b.toLowerCase().includes(y)),this.version>=10.4)){const b=e.outFields.filter(x=>x.toLowerCase().includes(y)&&x.length>y.length).map(x=>{const V=x.slice(y.length+1);return[this._updateRenderingRulesFunctionName(V,f),V]});c=b.map(x=>new v({functionName:x[0]})),m=b.map(x=>x[1]);const{rasterFunction:T}=this;c.length===0?T?.functionName?(c.push(T),m.push(T.functionName)):c=null:T?.functionName&&!c.some(x=>x.functionName===T.functionName)&&(c.push(T),m.push(T.functionName))}const R=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:g}=this;let h=e.timeExtent||this.timeExtent;if(g){const{isOutside:b,intersection:T}=qe(g,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(b)throw new O("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");T&&T.timeExtent!=null&&(h=T.timeExtent)}const w=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,h),j=this._getQueryParams({geometry:e.geometry,timeExtent:h,mosaicRule:w,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:c,pixelSize:s,returnCatalogItems:d,returnGeometry:R,raster:this.raster,maxItemCount:u?1:null});delete j.f;const F=new st(j);try{await this._generateRasterInfo(this.rasterFunction);const b=await it(this.url,F,{signal:t?.signal,query:{...this.customParameters}}),T=e.outFields,x=b.value!=null&&b.value.toLowerCase().includes("nodata");if(!(d&&!R&&b?.catalogItems?.features.length&&(p||!x)))return this._processVisibleRastersResponse(b,{returnDomainValues:o,templateRRFunctionNames:m,showNoDataRecords:p,templateFields:T});const V=this.objectIdField||"ObjectId",se=b.catalogItems?.features??[],Se=se.map($=>$.attributes?.[V]),xe=new Me({objectIds:Se,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[V]}),fe=await this.queryRasters(xe);return fe?.features?.length&&fe.features.forEach($=>{se.forEach(k=>{k.attributes[V]===$.attributes[V]&&(k.geometry=new It($.geometry),e.outSpatialReference!=null&&(k.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(b,{returnDomainValues:o,templateRRFunctionNames:m,showNoDataRecords:p,templateFields:T})}catch{throw new O("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const s=_(a(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(p=>p.data?.statistics),o=_(a(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(p=>p.data?.histograms),u=await Promise.all([s,o]);return u[0]&&u[0].forEach(p=>{p.avg=p.mean,p.stddev=p.standardDeviation}),{statistics:u[0]||null,histograms:u[1]||null}}async createFlowMesh(e,t){const s=this._rasterJobHandler.instance;return s?s.createFlowMesh(e,t):ci(e.meshType,e.simulationSettings,e.flowData,t.signal!=null?t.signal:new AbortController().signal)}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return Zt(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,s=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):Xt(a(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(p=>(this._set("serviceRasterInfo",p),this._set("multidimensionalInfo",p.multidimensionalInfo),p)),o=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,u=this._getRasterFunctionInfos();return Promise.all([s,o,u]).then(p=>{p[1]?this._set("rasterInfo",p[1]):this._set("rasterInfo",p[0]),p[2]&&this._set("rasterFunctionInfos",p[2]),this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this._set("renderer",null),ee.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("renderer",this._configRenderer(this.renderer)),this.addHandles([Dt(()=>this.rasterFunction,c=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(c).then(m=>{m&&(this.rasterInfo=m)})})]);const{serviceRasterInfo:d}=this;d.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(d)})}_combineMosaicRuleWithTimeExtent(e,t){const s=this.timeInfo,{multidimensionalInfo:o}=this.serviceRasterInfo;if(e==null||o==null||t==null||s?.startField==null)return e;const{startField:u}=s,p=o.variables.some(g=>g.dimensions.some(h=>h.name===u))?u:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter(g=>g.dimensionName!==p),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const d=e.multidimensionalDefinition.filter(g=>g.dimensionName===p),c=t.start!=null?t.start.getTime():null,m=t.end!=null?t.end.getTime():null,y=c==null||m==null||c===m,f=y?[c||m]:[[c,m]],R=this.version>=10.8;if(d.length)d.forEach(g=>{g.dimensionName===p&&(R?(g.dimensionName=null,g.isSlice=!1,g.values=[]):(g.isSlice=y,g.values=f))});else if(!R){const g=e.multidimensionalDefinition.filter(h=>h.variableName!=null&&h.dimensionName==null);g.length?g.forEach(h=>{h.dimensionName=p,h.isSlice=y,h.values=f}):e.multidimensionalDefinition.push(new Yt({variableName:"",dimensionName:p,isSlice:y,values:f}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(t=>!(!t.variableName&&!t.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQuery)throw new O("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?E(Me,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const e=new ni;this._rasterJobHandler.connectionPromise=e.initialize().then(()=>{this._rasterJobHandler.instance=e},()=>{}),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:s}=this;return e.type==="unique-value"&&this._hasRasterFunction(s)&&t?.bandCount===1&&["u8","s8"].includes(t.pixelType)||t!=null&&e!=null&&ei(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let t=this.sourceJSON;if(!t){const{data:s,ssl:o}=await _(a(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=s,this.sourceJSON=t,o&&(this.url=this.url.replace(/^http:/i,"https:"))}if(t.capabilities?.toLowerCase().split(",").map(s=>s.trim()).indexOf("tilesonly")>-1)throw new O("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const t=this._isMosaicDataset(e),s=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return t||s}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:t,functionArguments:s}=e,o=t?.toLowerCase()==="resample",u=s?.ResampleType||s?.resampleType;return o&&(u===7||u===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const t=this._isPicture(),{rasterInfo:s}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){if(!this.bandIds&&s.bandCount>=3){const u=ti(s);!u||s.bandCount===3&&u[0]===0&&u[1]===1&&u[2]===2||(this.bandIds=u)}e||(e=ii(s,{bandIds:this.bandIds,variableName:this.rasterFunction?null:this.mosaicRule?.multidimensionalDefinition?.[0].variableName}));const o=ri(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=s):this.symbolizer=new mi({rendererJSON:o,rasterInfo:s}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){e&&e.renderingRule!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:s}=this;return{raster:t,viewId:s,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,t,s){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):et(e,t,s)}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;return this.loaded?t:t&&this.version>=10.3?t.length===1&&t[0].name.toLowerCase()==="none"?t:(await _(a(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data?.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:s,returnImageBitmap:o,signal:u}=e;if(s&&this._canRequestImageElement(t.format)){const g=`${a(this.parsedUrl)}/exportImage`,{data:h}=await _(g,{responseType:o?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:u});return h instanceof Blob?{imageBitmap:await tt(h,g,u),params:t}:{imageOrCanvasElement:h,params:t}}const p=this._initJobHandler(),d=_(a(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:u}),c=(await Promise.all([d,p]))[0].data,m=t.format||"jpgpng";let y=m;if(y!=="bsq"&&y!=="bip"&&(y=di(c)),!y)throw new O("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(c)));const f={signal:u};return{pixelData:{pixelBlock:await(m==="gif"||m==="bmp"||m.includes("png")&&(y==="png"||y==="jpg")?et(c,{useCanvas:!0,...t},f):this._decodePixelBlock(c,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:m},f)),extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch(()=>null)}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=si(e,{multidimensionalSubset:this.multidimensionalSubset});if(t!=null&&t.length>0){this.mosaicRule=this.mosaicRule||new z;const s=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&this.rasterFunction.functionName?.toLowerCase()!=="none"&&t.forEach(o=>o.variableName=""),t=t.filter(({variableName:o,dimensionName:u})=>o&&o!=="*"||u),!s?.length&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const s=e.value,{templateRRFunctionNames:o,showNoDataRecords:u,returnDomainValues:p,templateFields:d}=t,c=e.processedValues;let m=e.catalogItems&&e.catalogItems.features,y=e.properties&&e.properties.Values&&e.properties.Values.map(F=>F.replaceAll(/ /gi,", "))||[];const f=this.objectIdField||"ObjectId",R=typeof s=="string"&&s.toLowerCase().includes("nodata"),g=[];if(s&&!m&&!R){const F={};F[f]=0,y=[s],m=[new Tt(this.fullExtent,null,F)]}if(!m)return[];let h,w,j;this._updateResponseFieldNames(m,d),R&&!u&&(m=[]);for(let F=0;F<m.length;F++){if(h=m[F],s!=null){if(w=y[F],j=this.rasterFunction&&c&&c.length>0&&o&&o.length>0&&o.includes(this.rasterFunction.functionName)?c[o.indexOf(this.rasterFunction.functionName)]:s,w.toLowerCase()==="nodata"&&!u)continue;const b="Raster.ItemPixelValue",T="Raster.ServicePixelValue";h.attributes[b]=w,h.attributes[T]=j,this._updateFeatureWithMagDirValues(h,w);const x=this.fields&&this.fields.length>0;let V=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?x?w:s:j;this.rasterFunction||(V=x?w:s),this._updateFeatureWithRasterAttributeTableValues(h,V)}if(h.sourceLayer=h.layer=this,p&&this._updateFeatureWithDomainValues(h),o&&c&&o.length===c.length)for(let b=0;b<o.length;b++){const T="Raster.ServicePixelValue."+o[b];h.attributes[T]=c[b]}g.push(m[F])}return g}_processMultidimensionalIntersection(e,t,s){const{multidimensionalSubset:o}=this;if(!o)return{isOutSide:!1,timeExtent:t,mosaicRule:s=this._combineMosaicRuleWithTimeExtent(s,t)};if(o){const{isOutside:u,intersection:p}=qe(o,{geometry:e,timeExtent:t});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null};p&&p.timeExtent!=null&&(t=p.timeExtent)}if((s=this._combineMosaicRuleWithTimeExtent(s,t))!=null&&s.multidimensionalDefinition){const{isOutside:u}=qe(o,{multidimensionalDefinition:s.multidimensionalDefinition});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:s}}_updateFeatureWithRasterAttributeTableValues(e,t){const s=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(s==null)return;const{features:o,fields:u}=s,p=u.map(m=>m.name).filter(m=>m.toLowerCase()==="value"),d=p&&p[0];if(!d)return;const c=o.filter(m=>m.attributes[d]===(t!=null?parseInt(t,10):null));c&&c[0]&&u.forEach(m=>{const y=this._rasterAttributeTableFieldPrefix+m.name;e.attributes[y]=c[0].attributes[m.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const s=t.split(/,\s*/).map(c=>parseFloat(c)),o=s.map(c=>[c]),u=s.map(c=>({minValue:c,maxValue:c,noDataValue:null})),p=new ze({height:1,width:1,pixelType:"f32",pixels:o,statistics:u});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:p,extent:new Fe(0,0,0,0,this.spatialReference)});const d=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[p.pixels[0][0],p.pixels[1][0]]:hi([p.pixels[0][0],p.pixels[1][0]]);e.attributes["Raster.Magnitude"]=d[0],e.attributes["Raster.Direction"]=d[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter(s=>s.domain&&s.domain.type==="coded-value");t?.forEach(s=>{const o=e.attributes[s.name];if(o!=null){const u=s.domain.codedValues.find(p=>p.code===o);u&&(e.attributes[s.name]=u.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const s=this.fieldsIndex;s!=null&&e.forEach(o=>{if(o&&o.attributes)for(const u of t){const p=s.get(u)?.name;p&&p!==u&&(o.attributes[u]=o.attributes[p],delete o.attributes[p])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return e!=null&&e.functionName!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const s=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(s)?t.get(s):e}_isRFTJson(e){return e&&e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:s,rasterFunction:o}=this;o&&e instanceof Ee&&e.rasterFunction==null&&(e.rasterFunction=o),s&&e.mosaicRule==null&&(e.mosaicRule=s),t&&e.raster==null&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(g=>g.trim()):["image","catalog"],{currentVersion:s,advancedQueryCapabilities:o,maxRecordCount:u}=e,p=t.includes("image"),d=e.serviceDataType==="esriImageServiceDataTypeElevation",c=!!(e.spatialReference||e.extent&&e.extent.spatialReference),m=t.includes("edit"),y=t.includes("mensuration")&&c,f=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(g=>g.trim()),R=y&&f.includes("basic");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:p,supportsExportImage:p,supportsIdentify:p,supportsMeasure:y,supportsDownload:t.includes("download"),supportsQuery:t.includes("catalog")&&e.fields&&e.fields.length>0,supportsGetSamples:s>=10.2&&p,supportsProject:s>=10.3&&p,supportsComputeStatisticsHistograms:s>=10.4&&p,supportsQueryBoundary:s>=10.6&&p,supportsCalculateVolume:s>=10.7&&d,supportsComputePixelLocation:s>=10.7&&t.includes("catalog"),supportsComputeAngles:s>=10.91,supportsAdd:m,supportsDelete:m,supportsEditing:m,supportsUpdate:m,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:u,maxRecordCountFactor:void 0,supportsStatistics:!!o?.supportsStatistics,supportsOrderBy:!!o?.supportsOrderBy,supportsDistinct:!!o?.supportsDistinct,supportsPagination:!!o?.supportsPagination,supportsStandardizedQueriesOnly:!!o?.useStandardizedQueries,supportsPercentileStatistics:!!o?.supportsPercentileStatistics,supportsCentroid:!!o?.supportsReturningGeometryCentroid,supportsDistance:!!o?.supportsQueryWithDistance,supportsExtent:!!o?.supportsReturningQueryExtent,supportsGeometryProperties:!!o?.supportsReturningGeometryProperties,supportsHavingClause:!!o?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!o?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0},mensuration:{supportsDistanceAndAngle:R,supportsAreaAndPerimeter:R,supportsPointOrCentroid:R,supportsHeightFromBaseAndTop:y&&f.includes("base-top height"),supportsHeightFromBaseAndTopShadow:y&&f.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:y&&f.includes("top-top shadow height"),supports3D:y&&f.includes("3d")}}}};function a(e){return e?.path??""}return r([l()],i.prototype,"_functionRasterInfos",void 0),r([l()],i.prototype,"_rasterJobHandler",void 0),r([l()],i.prototype,"_cachedRendererJson",void 0),r([l({readOnly:!0})],i.prototype,"_serviceSupportsMosaicRule",void 0),r([A("_serviceSupportsMosaicRule",["currentVersion","fields"])],i.prototype,"readServiceSupportsMosaicRule",null),r([l()],i.prototype,"_rasterAttributeTableFieldPrefix",void 0),r([l({readOnly:!0})],i.prototype,"_rasterFunctionNamesIndex",null),r([l()],i.prototype,"adjustAspectRatio",void 0),r([l({type:[Ce],json:{write:!0}})],i.prototype,"bandIds",void 0),r([A("bandIds")],i.prototype,"readBandIds",null),r([l({readOnly:!0,json:{read:!1}})],i.prototype,"capabilities",void 0),r([A("service","capabilities",["capabilities","currentVersion","serviceDataType"])],i.prototype,"readCapabilities",null),r([l({type:Number})],i.prototype,"compressionQuality",void 0),r([P("compressionQuality")],i.prototype,"writeCompressionQuality",null),r([l({type:Number})],i.prototype,"compressionTolerance",void 0),r([P("compressionTolerance")],i.prototype,"writeCompressionTolerance",null),r([l({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),r([l({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],i.prototype,"defaultMosaicRule",void 0),r([A("defaultMosaicRule",["defaultMosaicMethod"])],i.prototype,"readDefaultMosaicRule",null),r([l({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],i.prototype,"definitionExpression",void 0),r([l({readOnly:!0,constructOnly:!0})],i.prototype,"exportImageServiceParameters",void 0),r([l()],i.prototype,"rasterInfo",void 0),r([l({readOnly:!0,type:[ne]})],i.prototype,"fields",void 0),r([l({readOnly:!0})],i.prototype,"fieldsIndex",null),r([l({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],i.prototype,"format",null),r([A("service","format",["serviceDataType"])],i.prototype,"readFormat",null),r([l({type:Fe})],i.prototype,"fullExtent",void 0),r([l({readOnly:!0})],i.prototype,"hasMultidimensions",void 0),r([l({json:{read:{source:"maxImageHeight"}}})],i.prototype,"imageMaxHeight",void 0),r([l({json:{read:{source:"maxImageWidth"}}})],i.prototype,"imageMaxWidth",void 0),r([l({type:String,json:{type:ie.jsonValues,read:ie.read,write:ie.write}})],i.prototype,"interpolation",void 0),r([l()],i.prototype,"minScale",void 0),r([A("service","minScale")],i.prototype,"readMinScale",null),r([l()],i.prototype,"maxScale",void 0),r([A("service","maxScale")],i.prototype,"readMaxScale",null),r([l({type:z})],i.prototype,"mosaicRule",null),r([A("mosaicRule",["mosaicRule","defaultMosaicMethod"])],i.prototype,"readMosaicRule",null),r([P("mosaicRule")],i.prototype,"writeMosaicRule",null),r([l()],i.prototype,"multidimensionalInfo",void 0),r([l({type:Qt,json:{write:!0}})],i.prototype,"multidimensionalSubset",void 0),r([l({json:{type:Ce}})],i.prototype,"noData",void 0),r([P("noData")],i.prototype,"writeNoData",null),r([l({type:String,json:{type:be.jsonValues,read:be.read,write:be.write}})],i.prototype,"noDataInterpretation",void 0),r([l({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],i.prototype,"objectIdField",void 0),r([A("objectIdField")],i.prototype,"readObjectIdField",null),r([l({})],i.prototype,"geometryType",void 0),r([l({})],i.prototype,"typeIdField",void 0),r([l({})],i.prototype,"types",void 0),r([l({readOnly:!0})],i.prototype,"parsedUrl",null),r([l({type:Function})],i.prototype,"pixelFilter",void 0),r([l()],i.prototype,"raster",void 0),r([l({readOnly:!0})],i.prototype,"sourceType",void 0),r([A("sourceType",["serviceSourceType","fields"])],i.prototype,"readSourceType",null),r([l()],i.prototype,"viewId",void 0),r([l({types:Bt,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:kt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],i.prototype,"renderer",null),r([A("renderer")],i.prototype,"readRenderer",null),r([P("renderer")],i.prototype,"writeRenderer",null),r([l()],i.prototype,"symbolizer",void 0),r([l(wt)],i.prototype,"opacity",void 0),r([l({readOnly:!0})],i.prototype,"rasterFields",null),r([l({constructOnly:!0})],i.prototype,"rasterFunctionInfos",void 0),r([l({type:v})],i.prototype,"renderingRule",null),r([l({type:v,json:{name:"renderingRule"}})],i.prototype,"rasterFunction",null),r([A("rasterFunction",["renderingRule","rasterFunctionInfos"])],i.prototype,"readRasterFunction",null),r([l()],i.prototype,"serviceDataType",void 0),r([l({readOnly:!0,type:le})],i.prototype,"spatialReference",void 0),r([A("spatialReference",["spatialReference","extent"])],i.prototype,"readSpatialReference",null),r([l({json:{type:Je.jsonValues}})],i.prototype,"pixelType",void 0),r([A("pixelType")],i.prototype,"readPixelType",null),r([P("pixelType")],i.prototype,"writePixelType",null),r([l({constructOnly:!0,type:pt})],i.prototype,"serviceRasterInfo",void 0),r([l()],i.prototype,"sourceJSON",void 0),r([l(St)],i.prototype,"url",void 0),r([l({readOnly:!0})],i.prototype,"version",void 0),r([A("version",["currentVersion","fields","timeInfo"])],i.prototype,"readVersion",null),i=r([I("esri.layers.mixins.ArcGISImageService")],i),i};let q=class extends _t(Ot(Ct(jt(Vt(ar(At($t(Mt(Jt(Ut)))))))))){constructor(...n){super(...n),this.legendEnabled=!0,this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery"}normalizeCtorArgs(n,i){return typeof n=="string"?{url:n,...i}:n}load(n){const i=n!=null?n.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},n).catch(Et).then(()=>this._fetchService(i))),Promise.resolve(this)}writeOperationalLayerType(n,i,a){const e=this.renderer?.type==="vector-field";i[a]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}createPopupTemplate(n){const i=this.rasterFields,a=this.title,e=new Set;let t=!1,s=!1;this.capabilities&&(t=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,s=this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir");const o=new Set;t&&o.add("raster.itempixelvalue");for(const u of i){const p=u.name.toLowerCase();o.has(p)||p.includes("raster.servicepixelvalue.")||e.add(u.name)}return s&&e.add("raster.magnitude").add("raster.direction"),qt({fields:i,title:a},{...n,visibleFieldNames:e})}queryFeatures(n,i){return this.queryRasters(n,i).then(a=>{if(a?.features)for(const e of a.features)e.layer=e.sourceLayer=this;return a})}queryFeatureCount(n,i){return this.queryRasterCount(n,i)}redraw(){this.emit("redraw")}serviceSupportsSpatialReference(n){return zt(this,n)}};r([l(Lt)],q.prototype,"legendEnabled",void 0),r([l({type:["show","hide"]})],q.prototype,"listMode",void 0),r([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],q.prototype,"isReference",void 0),r([l({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],q.prototype,"operationalLayerType",void 0),r([P("web-map","operationalLayerType")],q.prototype,"writeOperationalLayerType",null),r([l(Gt)],q.prototype,"popupEnabled",void 0),r([l({type:Ht,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],q.prototype,"popupTemplate",void 0),r([l({readOnly:!0})],q.prototype,"defaultPopupTemplate",null),r([l({readOnly:!0,json:{read:!1}})],q.prototype,"type",void 0),q=r([I("esri.layers.ImageryLayer")],q);const Vr=q;export{Vr as default};
