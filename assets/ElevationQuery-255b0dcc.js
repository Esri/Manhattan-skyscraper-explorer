import{fu as U,at as d,f7 as q,dd as I,fv as L,cV as Q,fw as O,cA as A,f5 as E,dA as V,aI as W,fx as Z,cR as H,fy as X,ch as R,bX as B,c7 as $,fz as k}from"./index-112c244d.js";class G{constructor(e,t=null){if(this.tile=e,t!=null&&e!=null){const i=e.extent;this._samplerData=new U(t,i)}}get zmin(){return this._samplerData!=null?this._samplerData.data.minValue:0}get zmax(){return this._samplerData!=null?this._samplerData.data.maxValue:0}sample(e,t){if(this._samplerData==null)return;const{safeWidth:i,data:n,dx:l,dy:s,y1:o,x0:a}=this._samplerData,{width:r,values:c,noDataValue:f}=n,h=N(s*(o-t),0,i),u=N(l*(e-a),0,i),T=Math.floor(h),C=Math.floor(u),w=T*r+C,F=w+r,_=c[w],g=c[F],M=c[w+1],z=c[F+1];if(_!==f&&g!==f&&M!==f&&z!==f){const S=u-C,b=_+(M-_)*S;return b+(g+(z-g)*S-b)*(h-T)}}}function N(p,e,t){return p<e?e:p>t?t:p}class ee{async queryAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(r=>r.visible):e.slice()).length)throw new d("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");const n=y.fromGeometry(t);let l=!1;i&&i.returnSampleInfo||(l=!0);const s={...x,...i,returnSampleInfo:!0},o=await this.query(e[e.length-1],n,s),a=await this._queryAllContinue(e,o,s);return a.geometry=a.geometry.export(),l&&delete a.sampleInfo,a}async query(e,t,i){if(!e)throw new d("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||!(t instanceof y)&&t.type!=="point"&&t.type!=="multipoint"&&t.type!=="polyline")throw new d("elevation-query:invalid-geometry","Only point, polyline and multipoint geometries can be used to query elevation");const n={...x,...i},l=new J(e,t.spatialReference,n),s=n.signal;return await e.load({signal:s}),await this._createGeometryDescriptor(l,t,s),await this._selectTiles(l,s),await this._populateElevationTiles(l,s),this._sampleGeometryWithElevation(l),this._createQueryResult(l,s)}async createSampler(e,t,i){if(!e)throw new d("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||t.type!=="extent")throw new d("elevation-query:invalid-extent","Invalid or undefined extent");const n={...x,...i};return this._createSampler(e,t,n)}async createSamplerAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(s=>s.visible):e.slice()).length)throw new d("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");if(!t||t.type!=="extent")throw new d("elevation-query:invalid-extent","Invalid or undefined extent");const n={...x,...i,returnSampleInfo:!0},l=await this._createSampler(e[e.length-1],t,n);return this._createSamplerAllContinue(e,t,l,n)}async _createSampler(e,t,i,n){const l=i.signal;await e.load({signal:l});const s=t.spatialReference,o=e.tileInfo.spatialReference;s.equals(o)||(await q([{source:s,dest:o}],{signal:l}),t=I(t,o));const a=new K(e,t,i,n);return await this._selectTiles(a,l),await this._populateElevationTiles(a,l),new L(a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,n){if(e.pop(),!e.length)return i;const l=i.samplers.map(r=>Q(r.extent)),s=await this._createSampler(e[e.length-1],t,n,l);if(s.samplers.length===0)return i;const o=i.samplers.concat(s.samplers),a=new L(o,n.noDataValue);return this._createSamplerAllContinue(e,t,a,n)}async _queryAllContinue(e,t,i){const n=e.pop(),l=t.geometry.coordinates,s=t.sampleInfo;O(s);const o=[],a=[];for(let h=0;h<l.length;h++){const u=s[h];u.demResolution>=0?u.source||(u.source=n):e.length&&(o.push(l[h]),a.push(h))}if(!e.length||o.length===0)return t;const r=t.geometry.clone(o),c=await this.query(e[e.length-1],r,i),f=c.sampleInfo;if(!f)throw new Error("no sampleInfo");return a.forEach((h,u)=>{l[h].z=c.geometry.coordinates[u].z,s[h].demResolution=f[u].demResolution}),this._queryAllContinue(e,t,i)}async _createQueryResult(e,t){const i=await e.geometry.project(e.outSpatialReference,t);O(i);const n={geometry:i.export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(n.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach(l=>{l.tile=null,l.elevationTile=null}),n}async _createGeometryDescriptor(e,t,i){let n;const l=e.layer.tileInfo.spatialReference;if(t instanceof y?n=await t.project(l,i):(await q([{source:t.spatialReference,dest:l}],{signal:i}),n=I(t,l)),!n)throw new d("elevation-query:spatial-reference-mismatch",`Cannot query elevation in '${t.spatialReference.wkid}' on an elevation service in '${l.wkid}'`);e.geometry=y.fromGeometry(n)}async _selectTiles(e,t){e.type==="geometry"&&this._preselectOutsideLayerExtent(e);const i=e.options.demResolution;if(typeof i=="number")this._selectTilesClosestResolution(e,i);else if(i==="finest-contiguous")await this._selectTilesFinestContiguous(e,t);else{if(i!=="auto")throw new d("elevation-query:invalid-dem-resolution",`Invalid dem resolution value '${i}', expected a number, "finest-contiguous" or "auto"`);await this._selectTilesAuto(e,t)}}_preselectOutsideLayerExtent(e){if(e.layer.fullExtent==null)return;const t=new G(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach(n=>{const l=n.x,s=n.y;(l<i.xmin||l>i.xmax||s<i.ymin||s>i.ymax)&&(n.elevationTile=t)})}_selectTilesClosestResolution(e,t){const i=this._findNearestDemResolutionLODIndex(e,t);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const{tileInfo:i,tilemapCache:n}=e.layer,l=t/A(i.spatialReference),s=v(i,n);let o=s[0],a=0;for(let r=1;r<s.length;r++){const c=s[r];Math.abs(c.resolution-l)<Math.abs(o.resolution-l)&&(o=c,a=r)}return a}async _selectTilesFinestContiguous(e,t){const{tileInfo:i,tilemapCache:n}=e.layer,l=P(i,n,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,l,t)}async _selectTilesFinestContiguousAt(e,t,i){const n=e.layer;if(e.selectTilesAtLOD(t),t<0)return;const l=n.tilemapCache,s=e.getTilesToFetch();try{if(l&&!D(l))await E(Promise.all(s.map(o=>l.fetchAvailability(o.level,o.row,o.col,{signal:i}))),i);else if(await this._populateElevationTiles(e,i),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new d("elevation-query:has-unavailable-tiles")}catch(o){V(o),await this._selectTilesFinestContiguousAt(e,t-1,i)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),n={},l=e.options.cache,s=e.options.noDataValue,o=i.map(async a=>{if(a.id==null)return;const r=`${e.layer.uid}:${a.id}:${s}`,c=l!=null?l.get(r):null,f=c??await e.layer.fetchTile(a.level,a.row,a.col,{noDataValue:s,signal:t});l?.put(r,f),n[a.id]=new G(a,f)});await E(W(o),t),e.populateElevationTiles(n)}async _selectTilesAuto(e,t){this._selectTilesAutoFinest(e),this._reduceTilesForMaximumRequests(e);const i=e.layer.tilemapCache;if(!i||D(i))return this._selectTilesAutoPrefetchUpsample(e,t);const n=e.getTilesToFetch(),l={},s=n.map(async o=>{const a=new Z(null,0,0,0,H()),r=await X(i.fetchAvailabilityUpsample(o.level,o.row,o.col,a,{signal:t}));r.ok!==!1?o.id!=null&&(l[o.id]=a):V(r.error)});await E(Promise.all(s),t),e.remapTiles(l)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const n={},l=a=>{a.id!=null&&(a.id in n?n[a.id]++:(n[a.id]=1,i++))},s=a=>{if(a.id==null)return;const r=n[a.id];r===1?(delete n[a.id],i--):n[a.id]=r-1};e.forEachTileToFetch(l,s);let o=!0;for(;o&&(o=!1,e.forEachTileToFetch(a=>{i<=e.options.maximumAutoTileRequests||(s(a),t.upsampleTile(a)&&(o=!0),l(a))},s),o););}_selectTilesAutoFinest(e){const{tileInfo:t,tilemapCache:i}=e.layer,n=P(t,i,e.options.minDemResolution);e.selectTilesAtLOD(n,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let n=!1;e.forEachTileToFetch((l,s)=>{i.upsampleTile(l)?n=!0:s()}),n&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach(t=>{const i=t.elevationTile;let n=e.options.noDataValue;if(i){const l=i.sample(t.x,t.y);l!=null?n=l:t.elevationTile=null}t.z=n})}_extractSampleInfo(e){const t=e.layer.tileInfo,i=A(t.spatialReference);return e.geometry.coordinates.map(n=>{let l=-1;return n.elevationTile&&n.elevationTile!==e.outsideExtentTile&&(l=t.lodAt(n.elevationTile.tile.level).resolution*i),{demResolution:l}})}}class y{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new y;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map(i=>i.clone()),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await q([{source:this.spatialReference,dest:e}],{signal:t});const i=new R({spatialReference:this.spatialReference,points:this.coordinates.map(o=>[o.x,o.y])}),n=I(i,e);if(!n)return null;const l=this.coordinates.map((o,a)=>{const r=o.clone(),c=n.points[a];return r.x=c[0],r.y=c[1],r}),s=this.clone(l);return s.spatialReference=e,s}static fromGeometry(e){const t=new y;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof y)t.coordinates=e.coordinates.map(i=>i.clone()),t._exporter=(i,n)=>{const l=e.clone(i);return l.spatialReference=n,l};else switch(e.type){case"point":{const i=e,{hasZ:n,hasM:l}=i;t.coordinates=n&&l?[new m(i.x,i.y,i.z,i.m)]:n?[new m(i.x,i.y,i.z)]:l?[new m(i.x,i.y,null,i.m)]:[new m(i.x,i.y)],t._exporter=(s,o)=>e.hasM?new $(s[0].x,s[0].y,s[0].z,s[0].m,o):new $(s[0].x,s[0].y,s[0].z,o);break}case"multipoint":{const i=e,{hasZ:n,hasM:l}=i;t.coordinates=n&&l?i.points.map(s=>new m(s[0],s[1],s[2],s[3])):n?i.points.map(s=>new m(s[0],s[1],s[2])):l?i.points.map(s=>new m(s[0],s[1],null,s[2])):i.points.map(s=>new m(s[0],s[1])),t._exporter=(s,o)=>e.hasM?new R({points:s.map(a=>[a.x,a.y,a.z,a.m]),hasZ:!0,hasM:!0,spatiaReference:o}):new R(s.map(a=>[a.x,a.y,a.z]),o);break}case"polyline":{const i=e,n=[],l=[],{hasZ:s,hasM:o}=e;let a=0;for(const r of i.paths)if(l.push([a,a+r.length]),a+=r.length,s&&o)for(const c of r)n.push(new m(c[0],c[1],c[2],c[3]));else if(s)for(const c of r)n.push(new m(c[0],c[1],c[2]));else if(o)for(const c of r)n.push(new m(c[0],c[1],null,c[2]));else for(const c of r)n.push(new m(c[0],c[1]));t.coordinates=n,t._exporter=(r,c)=>{const f=e.hasM?r.map(u=>[u.x,u.y,u.z,u.m]):r.map(u=>[u.x,u.y,u.z]),h=l.map(u=>f.slice(u[0],u[1]));return new B({paths:h,hasM:e.hasM,hasZ:!0,spatialReference:c})};break}}return t}}class m{constructor(e,t,i=null,n=null,l=null,s=null){this.x=e,this.y=t,this.z=i,this.m=n,this.tile=l,this.elevationTile=s}clone(){return new m(this.x,this.y,this.z,this.m)}}class j{constructor(e,t){this.layer=e,this.options=t}}class J extends j{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type="geometry"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach(t=>t.tile=null);else{const{tileInfo:t,tilemapCache:i}=this.layer,n=v(t,i)[e].level;this.geometry.coordinates.forEach(l=>l.tile=t.tileAt(n,l.x,l.y))}}allElevationTilesFetched(){return!this.geometry.coordinates.some(e=>!e.elevationTile)}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile?.id&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates){const i=t.tile?.id;t.tile=i?e[i]:null}}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const n=i.tile;if(!n)continue;const l=i.tile?.id;i.elevationTile||!l||e[l]||(e[l]=n,t.push(n))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,()=>{t.tile=null})}}class K extends j{constructor(e,t,i,n){super(e,i),this.type="extent",this.elevationTiles=[],this._candidateTiles=[],this._fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=n}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),n=Math.min(i,e);n<0?this._candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(n)}_maximumLodForRequests(e){const{tileInfo:t,tilemapCache:i}=this.layer,n=v(t,i);if(!e)return n.length-1;const l=this.extent;if(l==null)return-1;for(let s=n.length-1;s>=0;s--){const o=n[s],a=o.resolution*t.size[0],r=o.resolution*t.size[1];if(Math.ceil(l.width/a)*Math.ceil(l.height/r)<=e)return s}return-1}allElevationTilesFetched(){return this._candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this._fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this._candidateTiles){const i=t.id&&e[t.id];i&&(this._fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles.map(t=>e[t.id]))}getTilesToFetch(){return this._candidateTiles}forEachTileToFetch(e,t){const i=this._candidateTiles;this._candidateTiles=[],i.forEach(n=>{if(this._fetchedCandidates.has(n))return void(t&&t(n));let l=!1;e(n,()=>l=!0),l?t&&t(n):this._candidateTiles.push(n)}),this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},n=[];for(const s of e){const o=s.id;o&&!i[o]?(i[o]=s,n.push(s)):t&&t(s)}const l=n.sort((s,o)=>s.level-o.level);return l.filter((s,o)=>{for(let a=0;a<o;a++){const r=l[a].extent;if(r&&s.extent&&k(r,s.extent))return t&&t(s),!1}return!0})}_selectCandidateTilesCoveringExtentAt(e){this._candidateTiles.length=0;const t=this.extent;if(t==null)return;const{tileInfo:i,tilemapCache:n}=this.layer,l=v(i,n)[e],s=i.tileAt(l.level,t.xmin,t.ymin),o=s.extent;if(o==null)return;const a=l.resolution*i.size[0],r=l.resolution*i.size[1],c=Math.ceil((t.xmax-o[0])/a),f=Math.ceil((t.ymax-o[1])/r);for(let h=0;h<f;h++)for(let u=0;u<c;u++){const T=new Z(null,s.level,s.row-h,s.col+u);i.updateTileInfo(T),this._tileIsMasked(T)||this._candidateTiles.push(T)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some(t=>e.extent&&k(t,e.extent))}}function P(p,e,t=0){const i=v(p,e);let n=i.length-1;if(t>0){const l=t/A(p.spatialReference),s=i.findIndex(o=>o.resolution<l);s===0?n=0:s>0&&(n=s-1)}return n}const x={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:"auto",minDemResolution:0};function v(p,e){const t=p.lods;if(D(e)){const{effectiveMinLOD:i,effectiveMaxLOD:n}=e;return t.filter(l=>l.level>=i&&l.level<=n)}return t}function D(p){return p?.tileInfo!=null}export{ee as ElevationQuery,y as GeometryDescriptor,P as getFinestLodIndex};
