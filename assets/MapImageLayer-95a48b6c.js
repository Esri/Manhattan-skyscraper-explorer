import{es as w,eD as $,eu as I,du as O,dv as T,dw as E,dx as M,et as R,eE as F,eF as L,cx as j,dA as P,eG as b,cB as g,eH as J,b$ as f,ci as N,eI as q,eJ as U,eK as A,at as v,bu as k,ai as s,aj as i,eL as x,dD as _,cH as D,dF as H,al as V,bx as z,eM as B}from"./index-112c244d.js";import{E as G,f as K,Y as C}from"./SublayersOwner-04af117f.js";import{m as W}from"./ExportImageParameters-6851dcda.js";import{t as Y}from"./imageBitmapUtils-965dc05a.js";import{e as S}from"./sublayerUtils-06c5a733.js";import"./QueryTask-53f33022.js";import"./executeForIds-9cee3635.js";import"./query-f938b96a.js";import"./normalizeUtils-ca47990d.js";import"./normalizeUtilsCommon-448ddeb2.js";import"./pbfQueryUtils-4859e776.js";import"./pbf-482f6762.js";import"./executeQueryJSON-6cf505f3.js";import"./executeQueryPBF-097da803.js";import"./floorFilterUtils-73949d2d.js";let t=class extends w($(I(G(K(O(T(E(M(R(F(L(j(z))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(P).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,a){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:n})=>n&&n.toArray().reverse()).toArray();let o=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap?.supportsDynamicLayers){const n=b(a.origin);if(n===g.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;o=S(p,c,g.SERVICE)}else if(n>g.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");o=S(p,c.sublayers,b(c.origin))}}const m=[],d={writeSublayerStructure:o,...a};let y=o;p.forEach(n=>{const c=n.write({},d);m.push(c),y=y||n.originOf("visible")==="user"}),m.some(n=>Object.keys(n).length>1)&&(r.layers=m),y&&(r.visibleLayers=p.filter(n=>n.visible).map(n=>n.id))}createExportImageParameters(e,r,l,a){const p=a&&a.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const o=new W({layer:this,floors:a?.floors,scale:J({extent:e,width:r})*p}),m=o.toJSON();o.destroy();const d=!a||!a.rotation||this.version<10.3?{}:{rotation:-a.rotation},y=e&&e.spatialReference,n=y.wkid||JSON.stringify(y.toJSON());m.dpi*=p;const c={};if(a?.timeExtent){const{start:h,end:u}=a.timeExtent.toJSON();c.time=h&&u&&h===u?""+h:`${h??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:r+","+l,...m,...d,...c}}async fetchImage(e,r,l,a){const{data:p}=await this._fetchImage("image",e,r,l,a);return p}async fetchImageBitmap(e,r,l,a){const{data:p,url:o}=await this._fetchImage("blob",e,r,l,a);return Y(p,o,a?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,r),{extent:a,fullExtent:p,timeExtent:o}=l,m=a||p;return{fullExtent:m&&N.fromJSON(m),timeExtent:o&&q.fromJSON({start:o[0],end:o[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return A(this,e)}async _fetchImage(e,r,l,a,p){const o={responseType:e,signal:p?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,a,p),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:d}=await f(m,o);return{data:d,url:m}}catch(d){throw k(d)?d:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};s([i({type:x})],t.prototype,"dateFieldsTimeReference",void 0),s([i({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),s([i()],t.prototype,"dpi",void 0),s([i()],t.prototype,"gdbVersion",void 0),s([i()],t.prototype,"imageFormat",void 0),s([_("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),s([i({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),s([i({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),s([i()],t.prototype,"imageTransparency",void 0),s([i({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),s([i({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),s([i({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),s([i({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),s([i({type:x})],t.prototype,"preferredTimeReference",void 0),s([i()],t.prototype,"sourceJSON",void 0),s([i({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),s([D("sublayers",{layers:{type:[C]},visibleLayers:{type:[B]}})],t.prototype,"writeSublayers",null),s([i({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),s([i({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),s([i(H)],t.prototype,"url",void 0),t=s([V("esri.layers.MapImageLayer")],t);const de=t;export{de as default};
