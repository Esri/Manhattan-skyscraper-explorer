import{bn as p,cF as l,dR as o,dV as d,dW as g,dS as _,ai as u,b3 as f,bO as w,ae as E}from"./index-2d893400.js";import{m as F}from"./FeatureStore-644b0e31.js";import{g as q,e as S,f as x}from"./QueryEngine-ec91af12.js";import{T,I as b}from"./geojson-6f8527bd.js";import{d as I}from"./sourceUtils-80dc7dad.js";import{H as j}from"./wfsUtils-42201fd8.js";import"./BoundsStore-33440aa9.js";import"./PooledRBush-d8438792.js";import"./quickselect-74fbe96d.js";import"./optimizedFeatureQueryEngineAdapter-fe267ca2.js";import"./centroid-3dcadaf5.js";import"./normalizeUtils-a826f9c0.js";import"./normalizeUtilsCommon-9f860a47.js";import"./WhereClause-7c1ab4ec.js";import"./executionError-e8d36121.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-3ede13ce.js";import"./generateRendererUtils-cb2a003c.js";import"./xmlUtils-444cb4c0.js";class J{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await j(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await T(i),p(t);const s=b(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!l(this._queryEngine.spatialReference,o))for(const r of s)r.geometry!=null&&(r.geometry=d(q(g(r.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let n=1;for(const r of s){const a={};I(this._fieldsIndex,a,r.attributes,!0),r.attributes=a,r.attributes[e]==null&&(r.objectId=r.attributes[e]=n++)}return s}}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:s,spatialReference:n,fields:r,geometryType:a,featureType:h,objectIdField:y,customParameters:m}=t;this._featureType=h,this._customParameters=m,this._getFeatureUrl=i,this._getFeatureOutputFormat=s,this._fieldsIndex=new _(r),await this._checkProjection(n),p(e),this._queryEngine=new S({fields:r,geometryType:a,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:n,timeInfo:null,featureStore:new F({geometryType:a,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(e.signal);return this._queryEngine.featureStore.addMany(c),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){return this._customParameters=t,this._snapshotTask?.abort(),this._snapshotTask=f(this._snapshotFeatures),this._snapshotTask.promise.then(e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)},e=>{this._queryEngine.featureStore.clear(),w(e)||E.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:e}))}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await x(o,t)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{J as default};
