import{mg as z,mh as M,mi as R,d4 as x,mj as N,aJ as r,aK as a,aM as m,aP as I,mk as U,aZ as v,a_ as E,fx as b,bM as P,aH as w,ml as j,aG as A,b7 as V,aL as J,b9 as D,g7 as Z,f5 as L,dg as k,f9 as G,i$ as q,kn as W,dG as B,by as K,eN as Q,ck as X,bn as H,mm as y,b8 as Y,bc as T,mn as ee,mo as te}from"./index-9e6e60fd.js";import{m as ie}from"./elevationInfoUtils-2ae63ad5.js";import{i as ne,o as re}from"./queryEngineUtils-4def6f0d.js";import{y as ae}from"./TileTreeDebugger-b01903a3.js";import"./DimensionAnalysisView3D-ee5a8c61.js";import"./LineVisualElement-50cc6889.js";import"./LengthDimension-c327a5a3.js";import"./Segment-1bf43872.js";import"./unitFormatUtils-735bd37b.js";import"./analysisViewUtils-5c278670.js";import"./ImageMaterial-e61aaffd.js";import"./Factory-ec516068.js";import"./RightAngleQuadVisualElement-d2c9c7f2.js";import"./VisualElementResources-b8a49c00.js";import"./PointVisualElement-4d9a6ae3.js";import"./EditGeometryOperations-40bb9baf.js";import"./dehydratedFeatureComparison-1c2b81bc.js";import"./VertexSnappingCandidate-f2137ba0.js";function S(e,t){return M(t.extent,$),R($,x(se,e.x,e.y,0))}const $=z(),se=N();let c=class extends I{get tiles(){const t=this.tilesCoveringView,i=this.pointOfInterest!=null?this.pointOfInterest:this.view.center;return t.sort((s,n)=>S(i,s)-S(i,n)),t}_scaleEnabled(){return U(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||this.tileInfo==null)return[];if(!this._scaleEnabled)return[];const{spans:t,lodInfo:i}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:s}=i,n=[];for(const{row:l,colFrom:o,colTo:u}of t)for(let g=o;g<=u;g++){const F=i.normalizeCol(g),O=new b(null,s,l,F);this.tileInfo.updateTileInfo(O),n.push(O)}return n}get tileInfo(){return this.view.featuresTilingScheme?.tileInfo??null}get tileSize(){return this.tileInfo!=null?this.tileInfo.size[0]:256}constructor(t){super(t),this.pointOfInterest=null}initialize(){this.addHandles(v(()=>this.view?.state?.viewpoint,()=>this.notifyChange("tilesCoveringView"),E))}};r([a({readOnly:!0})],c.prototype,"tiles",null),r([a({readOnly:!0})],c.prototype,"_scaleEnabled",null),r([a({readOnly:!0})],c.prototype,"tilesCoveringView",null),r([a({readOnly:!0})],c.prototype,"tileInfo",null),r([a({readOnly:!0})],c.prototype,"tileSize",null),r([a({constructOnly:!0})],c.prototype,"view",void 0),r([a({constructOnly:!0})],c.prototype,"layer",void 0),r([a()],c.prototype,"pointOfInterest",void 0),c=r([m("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],c);let h=class extends P{get tiles(){const t=this.tilesCoveringView,i=this._effectivePointOfInterest;if(i!=null){const s=t.map(n=>S(i,n));for(let n=1;n<s.length;n++)if(s[n-1]>s[n])return t.sort((l,o)=>S(i,l)-S(i,o)),t.slice()}return t}get tilesCoveringView(){return this._filterTiles(this.view.featureTiles?.tiles?.toArray()).map(oe)}get tileInfo(){return this.view.featureTiles?.tilingScheme.toTileInfo()??null}get tileSize(){return this.view.featureTiles?.tileSize??256}get _effectivePointOfInterest(){const t=this.pointOfInterest;return t??this.view.pointsOfInterest?.focus.location}constructor(t){super(t),this.pointOfInterest=null}initialize(){this.handles.add(v(()=>this.view.featureTiles,t=>{this.handles.remove(C),t&&this.handles.add(t.addClient(),C)},w))}_filterTiles(t){return t==null?[]:t.filter(i=>Math.abs(i.measures.screenRect[3]-i.measures.screenRect[1])>le&&i.measures.visibility===j.VISIBLE_ON_SURFACE)}};function oe({lij:[e,t,i],extent:s}){return new b(`${e}/${t}/${i}`,e,t,i,s)}r([a({readOnly:!0})],h.prototype,"tiles",null),r([a({readOnly:!0})],h.prototype,"tilesCoveringView",null),r([a({readOnly:!0})],h.prototype,"tileInfo",null),r([a({readOnly:!0})],h.prototype,"tileSize",null),r([a({constructOnly:!0})],h.prototype,"view",void 0),r([a()],h.prototype,"pointOfInterest",void 0),r([a()],h.prototype,"_effectivePointOfInterest",null),h=r([m("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],h);const le=50,C="feature-tiles";let _=class extends ae{constructor(e){super(e),this._handles=new A}initialize(){const e=setInterval(()=>this._fetchDebugInfo(),2e3);this._handles.add(V(()=>clearInterval(e)))}destroy(){this._handles.destroy()}getTiles(){if(!this._debugInfo)return[];const e=new Map,t=new Map;this._debugInfo.storedTiles.forEach(n=>{e.set(n.data.id,n.featureCount)}),this._debugInfo.pendingTiles.forEach(n=>{e.set(n.data.id,n.featureCount),t.set(n.data.id,n.state)});const i=n=>{const l=t.get(n),o=e.get(n)??"?";return l?`${l}:${o}
${n}`:`store:${o}
${n}`},s=new Map;return this._debugInfo.storedTiles.forEach(n=>{s.set(n.data.id,n.data)}),this._debugInfo.pendingTiles.forEach(n=>{s.set(n.data.id,n.data)}),Array.from(s.values()).map(n=>({lij:[n.level,n.row,n.col],geometry:J.fromExtent(D(n.extent,this.view.spatialReference)),label:i(n.id)}))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then(e=>{this._debugInfo=e,this.update()})}};r([a({constructOnly:!0})],_.prototype,"handle",void 0),_=r([m("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],_);let d=class extends P{get updating(){return this.updatingHandles.updating||this._workerHandleUpdating}constructor(e){super(e),this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async t=>{const i=[];for(const{points:s}of t)for(const{z:n}of s)i.push(n);return{elevations:i,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this._editId=0}destroy(){this._workerHandle.destroy()}initialize(){this._workerHandle=new de(this.schedule,{alignElevation:async(e,{signal:t})=>({result:await this.elevationAlignPointsInFeatures(e.points,t)}),getSymbologyCandidates:async(e,{signal:t})=>({result:await this.queryForSymbologySnapping(e,t)})}),this.handles.add([this._workerHandle.on("notify-updating",({updating:e})=>this._workerHandleUpdating=e),this._workerHandle.on("notify-availability",({availability:e})=>this._set("availability",e))])}async setup(e,t){const i=this._serviceInfoFromLayer(e.layer);if(i==null)return;const s={configuration:this._convertConfiguration(e.configuration),serviceInfo:i,spatialReference:e.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:e.layer.elevationInfo?.toJSON()};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",s,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async configure(e,t){const i=this._convertConfiguration(e);await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",i,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async refresh(e){await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async fetchCandidates(e,t){const i=e.point,s={distance:e.distance,mode:e.mode,point:Z(i[0],i[1],i[2],e.coordinateHelper.spatialReference.toJSON()),returnEdge:e.returnEdge,returnVertex:e.returnVertex,filter:e.filter!=null?e.filter.toJSON():null};return this._workerHandle.invoke(s,t)}async updateTiles(e,t){const i={tiles:e.tiles,tileInfo:e.tileInfo!=null?e.tileInfo.toJSON():null,tileSize:e.tileSize};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",i,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async applyEdits(e,t){const i=this._editId++,s={id:i};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("beginApplyEdits",s,t));const n=await this.updatingHandles.addPromise(L(e.result,t)),l={id:i,edits:{addedFeatures:n.addedFeatures?.map(({objectId:o})=>o).filter(k)??[],deletedFeatures:n.deletedFeatures?.map(({objectId:o,globalId:u})=>({objectId:o,globalId:u}))??[],updatedFeatures:n.updatedFeatures?.map(({objectId:o})=>o).filter(k)??[]}};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("endApplyEdits",l,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}getDebugInfo(e){return this._workerHandle.invokeMethod("getDebugInfo",{},e)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(e){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",e)}_convertConfiguration(e){return{filter:e.filter!=null?e.filter.toJSON():null,customParameters:e.customParameters,viewType:e.viewType}}_serviceInfoFromLayer(e){return e.geometryType==="multipatch"||e.geometryType==="mesh"?null:{url:e.parsedUrl?.path??"",fields:e.fields.map(t=>t.toJSON()),geometryType:G.toJSON(e.geometryType),capabilities:e.capabilities,objectIdField:e.objectIdField,globalIdField:e.globalIdField,spatialReference:e.spatialReference.toJSON(),timeInfo:e.timeInfo?.toJSON()}}};r([a({constructOnly:!0})],d.prototype,"schedule",void 0),r([a({constructOnly:!0})],d.prototype,"hasZ",void 0),r([a({constructOnly:!0})],d.prototype,"elevationAlignPointsInFeatures",void 0),r([a({constructOnly:!0})],d.prototype,"queryForSymbologySnapping",void 0),r([a({readOnly:!0})],d.prototype,"updating",null),r([a({readOnly:!0})],d.prototype,"availability",void 0),r([a()],d.prototype,"_workerHandleUpdating",void 0),d=r([m("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],d);class de extends q{constructor(t,i){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:i})}}let f=class extends I{get tiles(){return[new b("0/0/0",0,0,0,W(-1e8,-1e8,1e8,1e8))]}get tileInfo(){return new B({origin:new K({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new Q({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}constructor(e){super(e),this.pointOfInterest=null}};r([a({readOnly:!0})],f.prototype,"tiles",null),r([a({readOnly:!0})],f.prototype,"tileInfo",null),r([a({readOnly:!0})],f.prototype,"tileSize",null),r([a({constructOnly:!0})],f.prototype,"layer",void 0),r([a()],f.prototype,"pointOfInterest",void 0),f=r([m("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],f);let p=class extends X(I){get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get updating(){return this._workerHandle?.updating||this.updatingHandles.updating}get configuration(){const{view:e}=this,t=e!=null?e.type:"2d";return{filter:this._layer.createQuery(),customParameters:this._layer.customParameters,viewType:t}}get availability(){return this._workerHandle?.availability??0}get _layer(){return this.layerSource.layer}constructor(e){super(e),this._workerHandle=null,this._debug=null}initialize(){let e;const t=this.view;if(t!=null)switch(t.type){case"2d":this._tilesOfInterest=new c({view:t,layer:this._layer}),e=this._workerHandle=new d;break;case"3d":{const{resourceController:i}=t,s=this._layer,n=t.whenLayerView(s);this._tilesOfInterest=new h({view:t}),e=this._workerHandle=new d({schedule:o=>i.immediate.schedule(o),hasZ:this._layer.hasZ&&(this._layer.returnZ??!0),elevationAlignPointsInFeatures:async(o,u)=>{const g=await n;return H(u),g.elevationAlignPointsInFeatures(o,u)},queryForSymbologySnapping:async(o,u)=>{const g=await n;return H(u),g.queryForSymbologySnapping(o,u)}});const l=te(null);n.then(o=>l.value=o),this.addHandles([t.elevationProvider.on("elevation-change",({context:o})=>{const{elevationInfo:u}=s;ie(o,u)&&y(e.notifyElevationSourceChange())}),v(()=>s.elevationInfo,()=>y(e.notifyElevationSourceChange()),w),v(()=>l.value?.processor?.renderer,()=>y(e.notifySymbologyChange()),w),v(()=>l.value?.symbologySnappingSupported??!1,o=>y(e.setSymbologySnappingSupported(o)),w),Y(()=>l.value?.layer,["edits","apply-edits","graphic-update"],()=>e.notifySymbologyChange())]);break}}else this._tilesOfInterest=new f({layer:this._layer}),e=this._workerHandle=new d;this.handles.add([T(e)]),y(e.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null)),this.updatingHandles.add(()=>this._updateTilesParameters,()=>y(e.updateTiles(this._updateTilesParameters,null)),w),this.handles.add([v(()=>this.configuration,i=>y(e.configure(i,null)),E)]),t!=null&&this.handles.add(v(()=>ee.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES,i=>{i&&!this._debug?(this._debug=new _({view:t,handle:e}),this.handles.add(T(this._debug),"debug")):!i&&this._debug&&this.handles.remove("debug")},w)),this.handles.add(this.layerSource.layer.on("apply-edits",i=>{y(e.applyEdits(i,null))}))}refresh(){this._workerHandle?.refresh(null)}async fetchCandidates(e,t){const{coordinateHelper:i,point:s}=e;this._tilesOfInterest.pointOfInterest=i.arrayToPoint(s);const n=this._getGroundElevation;return(await this._workerHandle.fetchCandidates({...e},t)).candidates.map(l=>ne(l,n))}getDebugInfo(e){return this._workerHandle.getDebugInfo(e)}get _getGroundElevation(){return re(this.view)}};r([a({constructOnly:!0})],p.prototype,"spatialReference",void 0),r([a({constructOnly:!0})],p.prototype,"layerSource",void 0),r([a({constructOnly:!0})],p.prototype,"view",void 0),r([a()],p.prototype,"_tilesOfInterest",void 0),r([a({readOnly:!0})],p.prototype,"_updateTilesParameters",null),r([a({readOnly:!0})],p.prototype,"updating",null),r([a({readOnly:!0})],p.prototype,"configuration",null),r([a({readOnly:!0})],p.prototype,"availability",null),r([a()],p.prototype,"_getGroundElevation",null),p=r([m("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],p);export{p as FeatureServiceSnappingSource};
